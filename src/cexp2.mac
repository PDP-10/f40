	TITLE CEXP.2 V.027
	SUBTTL 15-JUL-70  KAREN KOLLING/DMN
;FROM	V.021	26-SEP-69

;COMPLEX EXP2 FUNCTION.

;THIS ROUTINE CALCULATES A COMPLEX NUMBER TO
;AN INTEGER POWER.

;THE BASIC ALGORITHM USED IS:

;	Z**B=(R**B)*[COS(B*TH)+I*SIN(B*TH)]

;WHERE Z=X+I*Y, R=/Z/, AND TH=ATAN2(Y,X).

;THE CALLING SEQUENCE IS:

;	MOVEI	16,POWER
;	PUSHJ	17,CEXP.2

;WHERE POWER IS THE ADDRESS OF THE INTEGER POWER,
;AND THE BASE IS IN AC'S 0 AND 1.  THE COMPLEX
;RESULT IS RETURNED IN AC'S 0 AND 1.

;BECAUSE SIN AND COS MUST PERFORM A RANGE REDUCTION
;ON THEIR ARGUMENTS, FOR LARGE B*TH THEY WILL
;RETURN ANSWERS OF ZERO.

	ENTRY	CEXP.2
	EXTERN	SQRT,ATAN2,SIN,COS,FLOAT,TYPER.,OVPCWD,ALOG,EXP


	SIXBIT/CEXP.2/
CEXP.2:	MOVEM	0,SAVEXL	;SAVE X IN SAVEX.
	MOVEM	1,SAVEYR	;SAVE Y IN SAVEYR.
	JUMPN	0,ZNONZR	;JUMP AHEAD UNLESS
	JUMPN	1,ZNONZR	;Z=(0,0).
	MOVE	1,(16)		;PICK UP B IN AC 1.
	SETZ	0,		;SET REAL (ANS.)=0 UNLESS
	JUMPGE	1,.+4		;B < 0, IN WHICH CASE
	MOVEI	0,3		;RETURN AN ERROR
	PUSHJ	17,TYPER.	;MESSAGE AND REAL (ANS)=
	HRLOI	0,377777	;+ INFINITY.
	SETZ	1,		;IMAG (ANS)=0.
	POPJ	17,		;RETURN.

ZNONZR:	MOVE	0,(16)		;PICK UP B IN AC 0.
	MOVEM	0,SAVEB		;SAVE B IN SAVEB.
	MOVEM	2,SAVE2		;SAVE THE CONTENTS OF AC 2.
	SETZM	MINFLG		;SET THE -INFINITY FLAG TO 0.
	CAME	0,[400000000000] ;THESE 4 LINES ARE A FIX FOR A****
	JRST	.+3		;HARDWARE BUG THAT MAKES FLOAT*****
	HRLZI	0,533400	;RETURN 0 FOR - INTEGER INFINITY.**
	JRST	.+3		;REMOVE THEM WHEN IT IS FIXED.*****
	JSA	16,FLOAT	;GET B IN FLOATING POINT
	EXP	SAVEB		;AND STORE IT
	MOVEM	0,BFLOAT	;IN BFLOAT
	MOVE	2,0		;AND IN AC 2.
	JSA	16,ATAN2	;FIND TH=
	EXP	SAVEYR		;ATAN(Y/X) AND THEN
	EXP	SAVEXL		;MULTIPLY IT BY
	FMPR	2,0		;BAND STORE IT IN AC 2.
	JSA	16,COS		;FIND COS(B*TH)
	EXP	2		;AND STORE
	MOVEM	0,COSBTH	;IT IN COSBTH.
	JSA	16,SIN		;FIND SIN(B*TH)
	EXP	2		;AND STORE
	MOVEM	0,SINBTH	;IT IN SINBTH.
	MOVM	2,SAVEXL	;/X/ TO AC 2.
	MOVM	1,SAVEYR	;/Y/ TO AC 1.
	CAMLE	2,1		;PUT THE SMALLER OF /X/ AND
	EXCH	2,1		;/Y/ IN AC 2, THE OTHER IN AC 1.
	FDVR	2,1		;CALC S/L AND
	JFCL			;SUPPRESS THE ERROR MESSAGE.
	FMPR	2,2		;CALC (S/L) **2 AND
	JFCL			;SUPPRESS THE ERROR MESSAGE
	FADRI	2,201400	;CALC. (1.0 + (S/L)**2).


	MOVEM	1,SAVEXL	;SAVE L IN SAVEXL.
	JSA	16,SQRT		;CALC. SQRT(1.0 + (S/L)**2)
	EXP	2		;AND LEAVE IT IN AC 0.
	MOVE	1,SAVEB		;PICK UP B IN AC 1.
	MOVE	2,0		;STORE THE SQRT IN AC 2.
	FMPR	0,SAVEXL	;CALC. R.
	JFCL	SEPAR		;IF OVERFLOW, GO TO SEPAR.
	MOVEM	0,SAVEYR	;STORE R IN SAVEYR.
	MOVSI	2,201400	;SET UP 1.0 IN AC 2.
	JUMPGE	1,XP2		;GO TO R**B CALC IF B>=0.
	MOVMS	1,1		;GET /B/. IF B WAS
	JFCL	MININF		;-INFINITY GO TO MININF.
	JRST	XP2		;GO TO R**B CALC.
XP1:	FMPR	0,0		;FORM R**N.
	JFCL	OVER		;IF OVER/UNDERFLOW, GO TO OVER.
	LSH	1,-1		;SHIFT EXP. FOR NEXT BIT.
XP2:	TRZE	1,1		;IS THE BIT ON?
	FMPR	2,0		;YES, MULTIPLY ANSWER BY R**N.
	JFCL	OVER		;IF OVER/UNDERFLOW, GO TO OVER.
	JUMPN	1,XP1		;UPDATE R**N UNLESS ALL FINISHED.
	MOVE	0,2		;PICK UP THE RESULT.
	MOVEM	0,1		;PUT IT IN AC 1 ALSO.
	SKIPL	SAVEB		;IF B WAS >=0,
	JRST	.+4		;GO AHEAD.
	MOVSI	1,201400	;O'E, INVERT THE CALCULATED
	FDVRB	1,0		;QUANTITY AND IF IT
	JFCL	OVER2		;OVER/UNDER FLOWS, GO TO OVER2.
	FMPR	0,COSBTH	;FORM REAL (ANS) AND GO
	JFCL	TEMP1		;TO TEMP1 IF IT UNDERFLOWS.
SECOND:	FMPR	1,SINBTH	;FORM IMAG (ANS) AND GO
	JFCL	TEMP2		;TO TEMP2 IF IT UNDERFLOWS.
OUT:	MOVE	2,SAVE2		;RESTORE THE CONTENTS OF AC 2.
	POPJ	17,		;RETURN.
OVER2:	MOVE	2,OVPCWD	;PICK UP THE FLAGS AND
	TLC	2,(1B11)	;COMPLEMENT THE UNDERFLOW FLAG
	JRST	.+2		;JUMP AHEAD.
OVER:	MOVE	2,OVPCWD	;PICK UP THE FLAGS.
	SKIPE	MINFLG		;IF NECESSARY, RESTORE THE
	SUB	17,[XWD 1,1]	;PUSH DOWN LIST COUNTER.
	SKIPG	BFLOAT		;IF TRUE OVERFLOW
	TLC	2,(1B11)	;OCCURED, JUMP TO
	TLNN	2,(1B11)	;ALOGRT. O'E,
	JRST	ALOGRT		;STAY HERE AND
	SKIPE	COSBTH		;RETURN AN ERROR MESSAGE UNLESS
	PUSHJ	17,ERR		;REAL(ANS) IS IDENTICALLY 0.
	SKIPE	SINBTH		;RETURN AN ERROR MESSAGE UNLESS
	PUSHJ	17,ERR		;IMAG(ANS) IS IDENTICALLY 0.
	SETZB	0,1		;ANS=(0,0)
	JRST	OUT		;GO TO RETURN.


ALOGRT:	JSA	16,ALOG		;CALC. THE LOG(R)
	EXP	SAVEYR		;AND MULTIPLY
ALGRT2:	FMPR	0,BFLOAT	;IT BY B.
	MOVEM	0,TEMP		;STORE IT IN TEMP.
	SKIPN	SINBTH		;IF SIN(B*TH)=0,
	JRST	ZRIMAG		;GO TO ZRIMAG.
	MOVM	2,SINBTH	;/SIN(B*TH)/ TO AC 2.
	JSA	16,ALOG		;CALC. THE LOG
	EXP	2		;(/SIN(B*TH)/) AND
	FADR	0,TEMP		;ADD IT TO THE OTHER TERM.
	MOVE	2,0		;PUT IT IN AC NE 0 OR 1.
	JSA	16,EXP		;CALC THE IMAGINARY
	EXP	2		;PART OF THE
	SKIPGE	SINBTH		;ANSWER AND GIVE IT
	MOVNS	0,0		;THE CORRECT SIGN.
	MOVEM	0,IMAG		;STORE IMAG(ANS) IN IMAG.


REAL:	SKIPN	COSBTH		;IF COS(B*TH)=0,
	JRST	ZRREAL		;GO TO ZRREAL.
	MOVM	2,COSBTH	;/COS(B*TH)/ TO AC 2
	JSA	16,ALOG		;CALC. THE LOG
	EXP	2		;(/COS(B*TH)/) AND
	FADR	0,TEMP		;ADD IT TO THE OTHER TERM.
	MOVE	2,0		;PUT IT IN AC NE 0 OR 1.
	JSA	16,EXP		;CALC THE REAL PART OF
	EXP	2		;THE ANSWER AND GIVE
	SKIPGE	COSBTH		;IT THE
	MOVNS	0,0		;CORRECT SIGN.
	MOVE	1,IMAG		;SET UP IMAG(ANS).
	JRST	OUT		;GO TO RETURN.

ZRIMAG:	SETZM	IMAG		;IMAG(ANS)=0
	JRST	REAL		;GO BACK TO CALC OF REAL(ANS).

ZRREAL:	SETZ	0,		;REAL(ANS)=0
	MOVE	1,IMAG		;SET UP IMAG(ANS).
	JRST	OUT		;GO TO RETURN


SEPAR:	JSA	16,ALOG		;CALC. THE LOG (SQRT(
	EXP	2		;1+(S/L)**2)) AND
	MOVEM	0,TEMP		;STORE IT IN TEMP.
	JSA	16,ALOG		;CALC THE LOG(L)
	EXP	SAVEXL		;AND ADD IT TO THE
	FADR	0,TEMP		;OTHER LOG.
	JRST	ALGRT2		;GO TO EXPANDED CALC.

MININF:	AOS	MINFLG		;SET B=-INFINITY FLAG.
	HRLOI	1,377777	;SET B=+INFINITY AND
	PUSHJ	17,XP2		;GO TO CALC R**B.
	FDVR	0,SAVEYR	;CALC. REAL(ANS).
	FDVR	1,SAVEYR	;CALC. IMAG(ANS).
	JRST	OUT		;GO TO RETURN.

MINFT:	SKIPE	MINFLG		;IF B=-INFINITY,
	JRST	ALOGRT		;GO TO ALOGRT.

ERR:	MOVEI	0,4		;O'E, RETURN AN ERROR
	PUSHJ	17,TYPER.	;MESSAGE AND GO BACK
	POPJ	17,		;TO CALC.

TEMP1:	MOVEM	1,TEMP		;TYPER. DOES NOT SAVE AC 1.
	PUSHJ	17,MINFT	;JUMP TO MINFT.
	MOVE	1,TEMP		;RESTORE AC 1.
	JRST	SECOND		;RETURN TO CALC.

TEMP2:	PUSHJ	17,MINFT	;JUMP TO MINFT.
	SETZM	1		;TYPER. DOES NOT SAVE AC 1.
	JRST	OUT		;GO TO RETURN.

SAVEXL:	0
SAVEYR:	0
SAVEB:	0
SAVE2:	0
MINFLG:	0
BFLOAT:	0
COSBTH:	0
SINBTH:	0
IMAG:	0
TEMP:	0
	END

