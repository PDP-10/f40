	TITLE CFDV V.027
	SUBTTL 17-JUL-70 KAREN KOLLING/DMN
;FROM	V.026	24-MAR-70


ENTRY CFD.0,CFD.2,CFD.4,CFD.6
ENTRY CFDM.0,CFDM.2,CFDM.4,CFDM.6

EXTERN	TYPER.

;THIS PROGRAM CALCULATES THE QUOTIENT OF TWO FLOATING POINT
;NUMBERS IN THE FOLLOWING MANNER:

;(A+IB)/(C+ID) = [(AC+BD)+I(BC-AD)]/(C**2+D**2)

;IF OVER OR UNDERFLOW OCCURS AT ANY POINT IN THE
;CALCULATION, THE PROGRAM JUMPS TO A MORE
;INVOLVED ROUTINE IN WHICH THE ORDER IN WHICH THE
;TERMS ARE MULTIPLIED OR DIVIDED TOGETHER IS VERY
;IMPORTANT.  OVER OR UNDERFLOW IS NOT PERMITTED
;UNLESS THE FINAL ANSWER OVER OR UNDERFLOWS.
;THERE ARE TWO SETS OF ENTRY POINTS FOR THE PROGRAM - ONE
;FOR THE DIVIDE ROUTINES AND ONE FOR THE DIVIDE-TO-MEMORY
;ROUTINES.  THE CALLING SEQUENCE FOR THE DIVIDE ROUTINES IS
;	MOVEI	16, ARG2
;	PUSHJ	17, CFD.N
;WHERE N=0,2,4, OR 6. ARG1 IS ASSUMED TO BE IN AC N AND (N+1),
;AND THE RESULTS ARE RETURNED IN AC N AND AC (N+1)

;THE CALLING SEQUENCE FOR THE DIVIDE-TO-MEMORY ROUTINES IS
;AS FOLLOWS:
;	MOVEI	16,ARG2
;	PUSHJ	17,CFDM.N
;WHERE N=0,2,4, OR 6. ARG1 IS ASSUMED TO BE IN AC N AND (N+1),
;AND THE RESULTS ARE RETURNED IN ARG2 AND ARG2+1.

	SIXBIT	/CFD.6/
CFD.6:	HRLI	16,6		;SET UP THE ADDRESS WORD.
	JRST	CFD.0		;GO TO THE MAIN ROUTINE.

	SIXBIT	/CFD.4/
CFD.4:	HRLI	16,4		;SET UP THE ADDRESS WORD.
	JRST	CFD.0		;GO TO THE MAIN ROUTINE.

	SIXBIT	/CFD.2/
CFD.2:	HRLI	16,2		;SET UP THE ADDRESS WORD.
	JRST	CFD.0		;GO TO THE MAIN ROUTINE.

	SIXBIT	/CFDM.6/
CFDM.6:	HRLI	16,6		;SET UP THE ADDRESS WORD.
	JRST	CFDM.0		;GO TO THE MEMORY ROUTINE

	SIXBIT	/CFDM.4/
CFDM.4:	HRLI	16,4		;SET UP THE ADDRESS WORD.
	JRST	CFDM.0		;GO TO THE MEMORY ROUTINE.

	SIXBIT	/CFDM.2/
CFDM.2:	HRLI	16,2		;SET UP THE ADDRESS WORD.
	JRST	CFDM.0		;GO TO THE MEMORY ROUTINE.

	SIXBIT	/CFDM.0/
CFDM.0:	SETZM	MEMFLG		;SET UP THE
	AOS	MEMFLG		;MEMORY FLAG.
	JRST	CFD.0+1		;GO TO THE MAIN ROUTINE.

	SIXBIT	/CFD.0/
CFD.0:	SETZM	MEMFLG		;SET UP THE MEMORY FLAG
	MOVSS	16,16		;SET UP 16.
	MOVEM	0,LCD		;SAVE AC 0 IN CASE IT IS AN ARG.
	MOVE	0,(16)		;PICK UP REAL OF ONE ARG AND
	MOVEM	0,SAB		;STORE IT IN SAB.
	MOVE	0,1(16)		;PICK UP IMAG OF ONE ARG AND
	MOVEM	0,LAB		;STORE IT IN LAB.
	MOVE	0,LCD		;RESTORE AC0.
	MOVSS	16,16		;SET UP ADDRESS WORD.
	MOVE	0,(16)		;PICK UP REAL OF THE OTHER ARG
	MOVEM	0,SCD		;AND STORE IT IN SCD
	MOVE	1,1(16)		;PICK UP IMAG. OF THIS ARG AND
	MOVEM	1,LCD		;STORE IT IN LCD.
	JUMPE	0,CZERO		;GO TO CZERO IF C=0, TO
	JUMPE	1,DZERO		;DZERO IF D=0,
	SKIPE	SAB		;TO NORMAL IF ONLY
	JRST	NORMAL		;ONE OF A AND B
	SKIPE	LAB		;=0, TO ABEQZR
	JRST	NORMAL		;IF
ABEQZR:	SETZM	REAL		;A=
	SETZM	0		;B=
	JRST	OUT+1		;0

DZERO:	MOVE	0,SAB		;D IS ZERO, SO REAL (ANS)
	FDVR	0,SCD		;= A/C AND
	MOVEM	0,REAL		;IMAG (ANS) =
	MOVE	0,LAB		;B/C
	FDVR	0,SCD		;AND THEN
	JRST	OUT+1		;GO TO EXIT
CZERO:	MOVE	0,LAB		;C IS ZERO (POSSIBLY D IS
	FDVR	0,LCD		;ZERO ALSO). REAL (ANS) =
	MOVEM	0,REAL		;B/D AND
	MOVN	0,SAB		;IMAG (ANS) =
	FDVR	0,LCD		;-A/D AND THEN
	JRST	OUT+1		;GO TO EXIT.
NORMAL:	FMPR	0,SCD		;THIS SIMPLE ROUTINE
	JFCL	NTSMPL		;CALCULATES
	FMPR	1,LCD		;REAL (ANS) =
	JFCL	NTSMPL		;(A*C+B*D)/(C(2)+D(2))
	FADR	0,1		;AND
	JFCL	NTSMPL		;IMAG (ANS) =
	MOVEM	0,TEMP		;(B*C-A*D)/(C(2)+D(2))
	MOVE	0,SCD		;BUT
	FMPR	0,SAB		;IF
	JFCL	NTSMPL		;AT
	MOVE	1,LAB		;ANY
	FMPR	1,LCD		;POINT
	JFCL	NTSMPL		;OVER
	FADR	0,1		;OR
	JFCL	NTSMPL		;UNDERFW
	FDVR	0,TEMP		;OCCURS
	JFCL	NTSMPL		;IT
	MOVEM	0,REAL		;JUMPS
	MOVE	0,SAB		;TO
	FMPR	0,LCD		;NTSMPL
	JFCL	NTSMPL		;FOR
	MOVE	1,LAB		;A
	FMPR	1,SCD		;DIFFERENT
	JFCL	NTSMPL		;CALCULATION.
	FSBRM	1,0		;IF THERE IS
	JFCL	NTSMPL		;OVER OR
	FDVR	0,TEMP		;UNDERFLOW
	JRST	OUT+1		;IT EXITS TO OUT+1.


NTSMPL:	MOVEM	2,SAVE2		;SAVE THE CONTENTS OF AC2.
	MOVEM	3,SAVE3		;SAVE THE CONTENTS OF AC3.
	MOVEM	4,SAVE4		;SAVE THE CONTENTS OF AC4.
	MOVE	2,SAB		;REARRANGE THE REAL
	MOVM	0,SAB		;AND IMAG PARTS OF
	MOVM	1,LAB		;THE 1ST ARG
	MOVEI	4,1		;SO THAT THE SMALLER ONE
	CAMG	0,1		;(IN MAGNITUDE) IS IN
	JRST	.+4		;SAB, AND THE OTHER IS IN
	EXCH	2,LAB		;LAB AND SET UP AC4 AS
	MOVEM	2,SAB		;A FLAG WORD TO TELL
	MOVNS	4,4		;WHICH PART IS WHERE.
	MOVE	2,SCD		;REARRANGE THE REAL
	MOVM	0,SCD		;AND IMAG PARTS OF THE OTHER ARG
	MOVM	1,LCD		;SO THAT THE SMALLER ONE
	CAMG	0,1		;(IN MAGNITUDE) IS IN SCD AND
	JRST	.+4		;THE OTHER IS IN LCD AND
	EXCH	2,LCD		;FIX AC4 TO TELL WHICH
	MOVEM	2,SCD		;PART
	IMULI	4,3		;IS WHERE.
	MOVE	3,LCD		;CALCULATE
	FDVRB	2,3		;THE
	JFCL			;TERM
	FMPR	2,2		;1+(SCD/LCD)**2
	JFCL			;AND
	FADRI	2,201400	;STORE IT IN
	MOVEM	2,DENOM		;DENOM.
	MOVE	0,SAB		;CALCULATE
	FDVR	0,LAB		;(SCD/LCD)*(SAB/LAB)
	JFCL			;SUPPRESSING
	FMPRM	0,3		;UNDERFLOW
	JFCL			;IF NECESSARY.
	CAIN	4,1		;FIX THE AC FLAG WORD
	MOVNI	4,2		;FOR
	ADDI	4,1		;EASY COMPARISONS.
	SKIPL	4		;CALCULATE
	MOVNS	3,3		;+-1 +-(SCD/LCD)*(SAB/LAB),
	FADRI	3,201400	;WHERE THE SIGNS
	SKIPN	4		;DEPEND ON
	MOVNS	3,3		;THE AC FLAG WORD.
	PUSHJ	17,CALC34	;JUMP TO CALC OF (LAB/LCD)*(AC3/DENOM).
	MOVEM	0,REAL		;STORE IT IN REAL(ANS) AND
	MOVEM	0,IMAG		;IMAG(ANS)(THE TEMP. LOCATIONS).
	MOVE	3,SAB		;CALCULATE
	MOVE	2,SCD		;+-(SAB/LAB)+-(SCD/LCD)
	CAMN	4,[-2]		;WHERE THE SIGNS
	MOVNS	2,2		;AGAIN DEPENDS ON
	CAMN	4,[-1]		;THE AC FLAG WORD,
	MOVNS	3,3		;AND IF UNDERFLOW
	MOVE	0,2		;OCCURS JUMP TO
	MOVE	1,3		;THE
	FDVR	3,LAB		;SPECIAL
	JFCL	OVER1		;ROUTINES-
	FDVR	2,LCD		;OVER1,
	JFCL	OVER2		;OVER2,
ADD2:	FADR	3,2		;OR
	JFCL	OVER3		;OVER3.
	PUSHJ	17,CALC34	;JUMP TO CALC OF(LAB/LCD)*(AC3/DENOM).
	JUMPGE	4,.+3		;STORE THIS IN
	MOVEM	0,IMAG		;THE CORRECT
	JRST	.+2		;PART OF THE
	MOVEM	0,REAL		;ANSWER (TEMP. LOCATION).
	MOVE	2,SAVE2		;RESTORE THE CONTENTS OF AC2.
	MOVE	3,SAVE3		;RESTORE THE CONTENTS OF AC3.
	MOVE	4,SAVE4		;RESTORE THE CONTENTS OF AC4.
OUT:	MOVE	0,IMAG		;PICK UP THE IMAG (ANS)
	SKIPN	MEMFLG		;SET UP AC 16 TO
	MOVSS	16,16		;CONTAIN THE ANSWER ADDRESS.
	MOVEM	0,1(16)		;STORE THE IMAG (ANS) IN ITS FINAL LOCATION, AND
	MOVE	0,REAL		;STORE THE REAL PART ALSO
	MOVEM	0,(16)		;AND THEN
	POPJ	17,		;EXIT.

CALC34:	MOVM	1,LAB		;CALC34 CALCS. (LAB/LCD)*(AC3/DENOM).
	MOVM	2,LCD		;/LAB/ TO AC 1 AND /LCD/ TO AC 2.
	MOVM	0,3		;/AC3/ TO AC 0.
	CAMGE	2,ONE		;GO TO CASEA IF
	JRST	CASEA		;/LCD/<1.0. O'E, STAY HERE.
	CAMGE	1,ONE		;GO TO CASEB IF /LCD/>1.0 AND
	JRST	CASEB		;/LAB/<1.0 OR IF
	CAMGE	0,ONE		;(>1)(<1)/(>1)(>1).
	JRST	CASEB		;STAY HERE IF (>1)(>1)/
	FDVR	2,1		;(>1)(>1).
	FDVR	0,DENOM		;CALCULATE
	FDVR	0,2		;IT AND GO
	JRST	SETSGN		;TO SETSGN.
CASEB:	FMPR	0,1		;CALCULATE CASE B AND
	JRST	.-4		;GO TO SETSGN (EVENTUALLY).
CASEA:	FMPR	2,DENOM		;CONDENSE THE DENOMINATOR INTO AC 2.
	CAMLE	1,ONE		;THEN (<1)(<1)/(<1) GOES
	JRST	CHKAGN		;TO SR, AND (>1)(><1)/(<>1)
	CAMLE	0,ONE		;GOES TO CHKAGN,
	JRST	NOTRVS		;AND EVERYTHING ELSE
	CAMG	2,ONE		;GOES TO
	JRST	SR		;NOTRVS.
NOTRVS:	FMPRM	1,0		;CALCULATE
	JFCL	1,SETSGN	;NOTRVS AND GO
	FDVR	0,2		;TO
	JRST	SETSGN		;SETSGN.
CHKAGN:	CAMG	0,ONE		;(>1)(<1)/(<>1)
	JRST	NOTRVS		;AND (>1)(>1)/(<1)
	CAMG	2,ONE		;GO TO
	JRST	NOTRVS		;NOTRVS.
	FDVR	1,2		;(>1)(>1)/(>1) IS
	FMPRM	1,0		;CALCULATED AND
	JRST	SETSGN		;GOES TO SETSGN.
SR:	MOVEM	1,TEMP		;SR CALCULATES
	FDVR	1,2		;(<1)(<1)/(<1)
	JFCL	OV1		;AND SINCE
	FMPRM	1,0		;(<1)/(<1)
	JRST	SETSGN		;CAN
OV1:	MOVE	1,TEMP		;OVERFLOW, IT
	MOVEM	0,TEMP		;CALCULATES
	FDVR	0,2		;IT
	JFCL	OV2		;WHICHEVER
	FMPRM	1,0		;WAY
	JRST	SETSGN		;IS
OV2:	MOVE	0,TEMP		;NECESSARY
	FMPRM	1,0		;AND
	FDVR	0,2		;THEN GOES TO SETSGN.
SETSGN:	MOVE	1,LAB		;GET THE
	XOR	1,LCD		;SIGN OF THE
	XOR	1,3		;RESULT IN AC 1.
	SKIPG	1		;SET THE SIGN OF
	MOVNS	0,0		;THE ANSWER
	POPJ	17,		;AND EXIT.

OVER1:	FDVR	2,LCD		;IF ONE
	JFCL	UU		;TERM
	MOVE	3,2		;UNDERFLOWS
	MOVE	0,1		;AND THE OTHER
	MOVE	2,LAB		;TERM IS SO LARGE
	JRST	OVER2+1		;THAT NO BITS
OVER2:	MOVE	2,LCD		;CAN BE
	MOVEM	2,SAVE5		;SAVED,
	JUMPE	3,UU		;THEN
	MOVM	1,3		;RETURN
	CAML	1,[030400000000] ;RIGHT
	JRST	ADD2+2		;AWAY.
	FMPRI	3,270400	;O'E, TRY TO
	FMPRI	0,270400	;SAVE SOME BITS
	FDVRM	0,2		;BY MULTIPLYING
	JFCL			;THE TERMS BY 2**56,
	FADRB	3,2		;ADDING THE TERMS, AND THEN / BY 2**56.
	FDVRI	3,270400	;IF THE RESULT UNDERFLOWS, GO
	JFCL	SRX		;TO SRX, O'E GO BACK
	JRST	ADD2+2		;TO THE MAIN ROUTINE.
OVER3:	MOVE	3,1		;SET UP
	FDVR	3,LAB		;AC 2 FOR
	FMPRI	3,270400	;SRX. AC 2 WILL
	FMPRI	2,270400	;CONTAIN THE TERM
	FADR	2,3		;*(2**56).
SRX:	MOVEM	5,SAVE5		;SAVE THE CONTENTS OF AC 5.
	MOVE	0,LCD		;THIS IS AN
	MOVE	1,LAB		;ALTERNATE
	MOVM	5,1		;CALCULATION TO
	CAMGE	5,ONE		;CALC34, AND TAKES
	JRST	SRX2		;ADVANTAGE OF
	FMPR	1,2		;THE FACT THAT HERE
	MOVM	5,0		;DENOM CONTAINS 1.0.
	CAML	5,ONE		;THE ORDER OF
	JRST	.+4		;CALCULATION
	FMPRI	0,270400	;DEPENDS
	FDVRM	1,0		;ON THE SIZE OF
	JRST	SETSN2		;THE TERMS. AFTER
	FDVRM	1,0		;THE CALCULATION A
	FDVRI	0,270400	;TRANSFER
	JRST	SETSN2		;IS
SRX2:	FDVRM	2,0		;MADE
	FMPR	0,1		;TO
	FDVRI	0,270400	;SETSN2
SETSN2:	MOVE	5,SAVE5		;RESTORE THE CONTENTS OF AC 5.
	JRST	ADD2+3		;GO BACK TO MAIN ROUTINE.


UU:	MOVEM	0,SAB		;ANOTHER ALTERNATE
	MOVEM	1,SCD		;CALCULATION TO
	FMPR	1,LCD		;CALC34
	FMPR	0,LAB		;USED WHEN
	FADR	0,1		;S/L FOR
	JFCL	UND		;BOTH SETS
	FDVR	0,LCD		;HAS UNDERFLOWED
	FDVR	0,LCD		;OR FOR
	JRST	ADD2+3		;UNDERFLOW PLUS
UND:	MOVEI	0,4		;ZERO.
	PUSHJ	17,TYPER.	;RETURN AT END
	JRST	ADD2+3		;TO ADD2+3.


SAVE2:	0
SAVE3:	0
SAVE4:	0
SAVE5:	0
SAB:	0
LAB:	0
SCD:	0
LCD:	0
TEMP:	0
REAL:	0
IMAG:	0
DENOM:	0
MEMFLG:	0
ONE:	201400000000

		END


