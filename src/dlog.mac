TITLE DLOG  V.022      PDP-10 DOUBLE PRECISION LOGARITHM FUNCTION
SUBTTL	31-DECEMBER-1969	/KK

;FROM V.020	2 MAY 1969	/TWE
;FROM V.005,  10-MAR-67
;THIS PROGRAM CALCULATES THE LOGARITHM OF A DOUBLE PRECISION
;ARGUMENT. THE ALGORITHM USED IS DESCRIBED ON PAGES 29-30 OF
;RALSTON AND WILF, "MATHEMATICAL METHODS FOR DIGITAL COMPUTERS".
;THE ARGUMENT X IS WRITTEN AS

;	X = (2**N)*F	WHERE 1/2 < F < 1
;THEN LOG(X) = (N*LOGE(2)) + LOG(F)
;F IS REDUCED BY FIXED POINT MULTIPLICATION BY NOT MORE THAN
;THREE CONSTANTS. THIS YIELDS

;	0 < T = A1*A2*A3*F - 1.0 < (2**-7)/5
;NOTE THAT NOT ALL THE A1,A2,A3 NEED BE INCLUDED IN THE PRODUCT.
;FINALLY, 
;	LOG(F) = LOG(1+T) - LOG(A1) - LOG(A2) - LOG(A3)
;LOG(1+T) IS CALCULATED AS A TAYLOR SERIES IN T.

;THE ROUTINE IS CALLED IN THE FOLLOWING MANNER:
;	JSA	Q, DLOG
;	EXP	ARG
;WHERE ARG IS THE ADDRESS OF THE HIGH ORDER PART OF THE DOUBLE
;PRECISION ARGUMENT. THE RESULT IS LEFT IN ACCUMULATOR A AND B.
;AVAILABLE TABLES FOR LOGARITHMS LIST 16 SIGNIFICANT DIGITS,
;ALL OF WHICH AGREE WITH VALUES PRODUCED BY THIS PROGRAM. AN
;ESTIMATE OF THE MAXIMUM THEORETICAL ERROR IS OBTAINED BY OB-
;SERVING THAT, AFTER REDUCTION, THE ARGUMENT IS LESS THAN
;(2**-7)/5 = .00625. HENCE, THE ERROR IN THE TAYLOR SERIES
;IS LESS THAN
;	(.00625**9)/9 = 1.4573*10**-20/9 = .1619*10**-20

MLON

	A=	0
	B=	1
	C=	2
	D=	3
	E=	4
	F=	5
	G=	6

	Q=	16
	P=	17

	X=	G		;HIGHEST AC TO SAVE
;DOUBLE PRECISION COMMON LOGARITHM FUNCTION
;THE ROUTINE CALCULATES THE LOGARITHM, BASE 10, OF A DOUBLE
;PRECISION ARGUMENT. THE ALGORITHM USED IS
;	DLOG10(X) = DLOG(X)*LOG10(E)

;THE CALLING SEQUENCE FOR THE ROUTINE IS THE FOLLOWING:
;	JSA	Q, DLOG10
;	EXP	ARG
;THE DOUBLE PRECISION ANSWER IS RETURNED IN AC A AND B.

	ENTRY	DLOG10

	SIXBIT /DLOG10/
DLOG10:	0			;ENTRY TO DLOG10 ROUTINE
	MOVEI	B,@(Q)		;GET ADDRESS OF ARGUMENT
	SKIPN	(B)		;IF ARG = 0,
	JRST	ZERO		;THEN GO TO ZERO.
	HRRM	B,.+2		;SET ADR UP FOR CALL TO DLOG
	JSA	Q, DLOG		;CALCULATE LOG(ARG)
	EXP	.-.		;ADDRESS MODIFIED
	MOVEM	C,ACSAVE	;SAVE ACCUMULATOR C

FLMUL A,LOG10D

	MOVE	C,ACSAVE	;RESTORE C
	JRA	Q, 1(Q)		;EXIT

LOG10D:	177674557305	;.43429448190325182765
	144223345034

ENTRY DLOG

	SIXBIT /DLOG/
DLOG:	0			;ENTRY TO DLOG ROUTINE
	MOVE	0,XBLT		;SAVE AC'S
	BLT	0,ACSAVE+X-C	;...
	MOVEI	B, @(Q)		;GET ADDRESS OF ARGUMENT
	MOVE	A, (B)		;PICK UP HIGH ORDER
	MOVE	B, 1(B)		;PICK UP LOW ORDER
	JUMPE	A, ZERO		;CHECK FOR ZERO ARGUMENT
	SKIPGE	A		;IS ARGUMENT POSITIVE?
	DFN	A,B		;NO, CALCULATE LOG[ABSF(X)]
	CAMN	A,ONE		;X PRECISELY 1.0?
	JUMPE	B,[SETZB A,B
		JRST DLOG5]	;YES, RETURN ZERO
DLOG1:	LDB	D,[POINT 8,A,8]	;NO,PICK UP EXPONENT FROM HI ORDER
	SUBI	D, 200		;GET EXPONENT EXCESS 200
	FSC	D,233		;MAKE FLOATING POINT NUMBER
	MOVEI	E,0		;SET UP LO HALF
				;CALCULATE N*LOGE(2)
FLMUL D,DLOGE2
DMOVEM D,SUMSAV

	LSH	B,8		;GET RID OF LOW ORDER EXP.
	TLZ	A,777000	;MASK OUT EXPONENT
	ASHC	A,8		;NORMALIZE FRACTION TO BIT 1
	SETZB	D,E		;INITIALIZE REDUCTION CONSTANT TO 0
DLOG2:	LDB	G,[POINT 3,A,4]	;GET HI 3 BITS BELOW 1/2
	MUL	B, LIST(G)	;FIXED POINT MULTIPLY FOR LO HALF
	MOVE	C,B		;SAVE HI HALF OF LO PRODUCT
				;(LO HALF IS ALL 0'S, THROW IT AWAY)
	MUL	A, LIST(G)	;MULTIPLY HI ORDER, TOO
	TLO	B,(1B0)		;SET BIT 0, TO AVOID OVERFLOW
	ADD	B,C		;COMBINE RESULTS OF MULTIPLY
	TLZN	B,(1B0)		;CLEAR BIT 0, WAS THERE OVERFLOW?
	ADDI	A,1		;YES, PROPOGATE CARRY
	ASH	G, 1		;TURN BITS INTO D.P. POINTER
FLADD D,LOGLST(G)

	TLZE	A, 200000	;IS THE PRODUCT .GE. 1.0?
	JRST	DLOG3		;YES
	ASHC	A, 1		;NO, GET RID OF EXTRANEOUS ZERO
	JRST	DLOG2		;TRY ANOTHER MULTIPLICATION

DLOG3:	ASHC	A, -7		;MAKE ROOM FOR THE EXPONENT
	FSC	A,200		;SET EXPONENT TO 200
	ASH	B,-8		;MAKE ROOM FOR LO EXPONENT
	FSC	B,200-^D27	;INSERT LO EXPONENT
	FADL	A,B		;MAKE NORMAL DOUB, PRECISION NUMBER
	DFN	D,E		;NEGATE LOG OF MAGIC NUMBERS
				;AND ADD INTO FINAL SUMMATION
FLADD D,SUMSAV
DMOVEM D,SUMSAV
				;PICK UP CONSTANT TO START
DMOVE D,A9

	MOVEI	G,A8		;INIT TABLE POINTER AT A8
DLOG4:				;MULTIPLY ACCUMULATED SUM BY X

FLMUL D,A
				;ADD NEXT CONSTANT INTO PARTIAL SUM
FLADD D,0(G)

	ADDI	G, 2		;UPDATE POINTER TO NEXT CONSTANT
	CAIG	G, A1		;ARE WE DONE YET?
	JRST	DLOG4		;NO, LOOP BACK FOR MORE TAYLOR SERIES
				;YES, ONE LAST MULTIPLICATION
FLMUL A,D
				;AND ADD SERIES SUM INTO FINAL ANSWER
FLADD A,SUMSAV

DLOG5:	MOVS	X, XBLT		;PICK UP BLT POINTER
	BLT	X,X		;RESTORE ACCUMULATORS
	JRA	Q, 1(Q)		;EXIT

ZERO:	MOVSI	A,400000	;SET UP LARGE NEG. NUM.
	FADL	A,A		;CAUSE NEGATIVE OVERFLOW
	JRA	Q,1(Q)		;TRAP ROUTINE FIXED IT UP AND
				;PRINTED MESSAGE
LOGLST:	200471174064		;0.61180 15411 05992 8976
	145653052063
	200402252251		;0.50455 60107 52395 2859
	145322720776
	177637144373		;0.40546 51081 08164 3810
	144137630230
	177506061360		;0.31845 37311 18534 6147
	144416136605
	176710776761		;0.22314 35513 14209 7553
	143715232103
	176537746034		;0.17185 02569 26659 2214
	143123623647
	175557032242		;0.08961 21586 89687 12374
	142562553226
	173770123303		;0.03077 16586 66753 68689
	140474063000

LIST:	354000000000		;1.11011 BINARY
	324000000000		;1.10101 BINARY
	300000000000		;1.10000 BINARY
	260000000000		;1.01100 BINARY
	240000000000		;1.01000 BINARY
	230000000000		;1.00110 BINARY
	214000000000		;1.00011 BINARY
	204000000000		;1.00001 BINARY

DLOGE2:	200542710277		;0.69314 71805 59945 30941 72321
	145575071736

A9:	175707070707	;1/9
	142070707071
A8:	601400000000	;-1/8
	000000000000
A7:	176444444444	;1/7
	143444444445
A6:	601252525252	;-1/6
	143525252525
A5:	176631463146	;1/5
	143314631463
A4:	600400000000	;-1/4
	000000000000
A3:	177525252525	;1/3
	144252525253
A2:	577400000000	;-1/2
	000000000000
ONE:
A1:	201400000000	;1.0
	000000000000

SUMSAV:	BLOCK 2		;STORAGE FOR PARTIAL ANSWER

XBLT:	XWD	C, ACSAVE
ACSAVE:	BLOCK	X-C+1

	END

