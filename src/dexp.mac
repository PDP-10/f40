TITLE DEXP  V.022       PDP-10 DOUBLE PRECISION EXPONENTIAL FUNCTION
SUBTTL	9-JANUARY-1970	/KK

;FROM V.020	3 MAY 1969	/TWE
;FROM V.005,   12-JUL-67
;THIS PROGRAM CALCULATES THE EXPONENTIAL OF A DOUBLE PRECISION
;ARGUMENT. AN ARGUMENT OF ZERO CAUSES AN IMMEDIATE EXIT WITH AN
;ANSWER OF 1.0 . AN ARGUMENT WHOSE MAGNITUDE EXCEEDS 88.028
;CAUSES THE ROUTINE TO EXIT WITH 0 IF THE ARGUMENT WAS NEGATIVE,
;AND 377777777777 IF THE ARGUMENT WAS POSITIVE. THIS IS
;BECAUSE DIRECT CALCULATION OF EXP(X) FOR ABSF(X)>88.028 WOULD
;CAUSE EXPONENT OVERFLOW OR UNDERFLOW.

;THE ROUTINE USES THE FOLLOWING ALGORITHM:
;EXP(X)	= 2**(X*LOG2(E))
;	= 2**(M+F) WHERE M IS AN INTEGER AND 0<F<1
;	= 2**(M+N+R) WHERE 0<R<1/8 AND M+N+R=X*LOG2(E)

;	= 2**(M+N) * EXP(R*LOG(2))
;2**M IS CALCULATED EASILY WITH THE FLOATING SCALE INSTRUCTION.
;2**N IS CALCULATED BY DETERMINING THE CORRECT INTERVAL OF N AND
;USING A TABLE OF POWERS OF TWO FROM 2**1/8 TO 2**7/8.

;FINALLY, EXP(R*LOG(2)) IS CALCULATED BY A CONTINUED FRACTION
;TAKEN FROM RALSTON AND WILF, "METHODS FOR DIGITAL COMPUTERS" :
;EXP(R*LOG(2)) = 1+A4/((B4/R) -C4 + D4*R + H4/(R + B4/R))

;THE FOLLOWING ERRORS HAVE BEEN OBSERVED WITH DEXP:
;	1. WITH -10.0<X<10.0, ERRORS RANGED FROM 0 TO 48
;	   UNITS IN THE 19TH SIGNIFICANT DIGIT. THE MEAN ERROR
;	   FOR 20 READINGS WAS 5.4 UNITS IN THE 19TH DIGIT.
;	2. WITH 10.0<X<40.0, ERRORS RANGED FROM 0 TO 41 UNITS
;	   IN THE 19TH SIGNIFICANT DIGIT. THE MEAN ERROR FOR
;	   7 READINGS WAS 16 UNITS IN THE 19TH SIGNIFICANT DIGIT.
;	3. WITH 40.0<X<88.0, ERRORS RANGED FROM 5 TO 57 UNITS IN
;	   THE 19TH SIGNIFICANT DIGIT. THE MEAN ERROR FOR 12
;	   READINGS WAS 44.4 UNITS IN THE 19TH SIGNIFICANT DIGIT.
;THE ERRORS REFERRED TO ABOVE ARE ABSOLUTE ERRORS. IT SHOULD
;BE NOTED THAT ADDITIONAL ERRORS ARE INTRODUCED BY ERRORS IN
;THE DOUBLE PRECISION INPUT AND OUTPUT ROUTINES.

	A=	0
	B=	1
	C=	2
	D=	3
	E=	4
	F=	5
	G=	6

	Q=	16
	P=	17
	X=	G	;HIGHEST AC TO SAVE
MLON

	ENTRY	DEXP

	SIXBIT /DEXP/
DEXP:	0			;ENTRY TO DEXP ROUTINE
	MOVE	0,XBLT		;SAVE ACCUMULATORS
	BLT	0,ACSAVE+X-C	;...
	MOVEI	B, @(Q)		;GET ADDRESS OF ARGUMENT
	MOVE	A, (B)		;PICK UP HIGH ORDER ARGUMENT
	MOVE	B, 1(B)		;PICK UP LOW ORDER ARGUMENT
	JUMPE	A,[MOVSI A,(1.0)	;RETURN 1.0 FOR ARG OF ZERO
		JRST DEXEND]		;EXIT
	MOVM	C,A		;GET POS VALUE OF EXPONENT
	CAML	C,DCON1		;TOO BIG TO COMPUTE?
	JRST	[HRLOI A,377777	;YES, GET LARGEST POS NUM
		MOVE C,ACSAVE	;RESTORE AC C.
		SKIPGE @(Q)	;SUPPOSED TO BE SMALL ?
		MOVEI A,1	;YES, MAKE IT VERY SMALL
		FADL A,A	;CAUSE OVER/UNDERFLOW, RETURN FIX UPS
		JRST DEXEND]	;RETURN
FLMUL A,DLOG2E

	HLRE	E,A		;EXTRACT EXPONENT
	ASH	E,-9		;...
	TSC	E,E		;TAKE 1'S COMPLEMENT IF NUM .L. 0
	LSH	B, 8		;REMOVE LOW ORDER EXP.
	SKIPGE	A		;CHANGE  EXPONENT BITS TO SIGN BITS
	TLOA	A,377000	;NUMBER NEGATIVE, SET BITS
	TLZ	A,377000	;NUMBER POSITIVE, CLEAR BITS
	ASHC	A, 8		;LEFT JUSTIFY ARG FRACTION BITS
				;GET ANOTHER COPY OF FRACTION
DMOVE C,A

	ASHC	A, -243(E)	;SIMULATE THREE-WORD SHIFT WITH...
				;TWO LONG SHIFTS. THIS LEAVES INTEGER
				;IN A, FRAC IN B AND C.
	LSH	D,1		;SQUEEZE OUT SIGN BIT
	LSHC	C,43-200(E)	;THEN DO 2ND LONG SHIFT, (THE LSHC HERE
					;PREVENTS OVERFLOW GOING LEFT)
	TLZ	B, (1B0)	;CLEAR SIGN BIT. IF FRAC WAS <0,
				;THIS GIVES 1-FRAC AND PROPER EXP.
	HRRM	A, SCALE	;SAVE EXPONENT FOR FUTURE SCALING
	MOVEI	G, 7		;GET INDEX REGISTER POINTER TO TABLE
REDUCE:	CAMN	B, TABLE(G)	;DOES ARGUMENT MATCH TABLE ENTRY?
	JUMPE	C,[LSH G,1	;YES, IFF LO HALF=0. CHANGE INDEX TO POINTER
				;PICK UP DOUBLE WORD ANSWER
		DMOVE A,POWERS(G)
		JRST SCALE]	;SCALE RESULTS AND EXIT
	CAMGE	B, TABLE(G)	;IS ARGUMENT GREATER THAN ENTRY?
	SOJA	G, REDUCE	;NO, TRY NEXT LOWER ENTRY
	SUB	B, TABLE(G)	;YES, ALL DONE -REDUCE ARGUMENT
	LSH	G, 1		;SAVE INDEX AS A POINTER
	ASHC	B, -8		;MAKE ROOM FOR EXPONENT
	MOVE	A, B		;SET UP ARG. FOR NORMALIZING
	ASH	C, -8		;MAKE ROOM FOR LOW ORDER EXP.
	FSC	A,200		;SET EXP TO 200
	FSC	C,200-^D27	;SET EXP 27 LOWER
	FADL	A,C		;MAKE STANDARD NUMBER

				;GET B4/F
DMOVE D,B4
FLDIV D,A
				;SAVE B4/F
DMOVEM D,B4F
				;GET F+B4/F
FLADD D,A
				;GET H4/(F+B4/F)
DMOVEM D,FB4F
DMOVE D,H4
FLDIV D,FB4F
				;GET D4*F
FLMUL A,D4
				;GET (B4/F)-C4+D4*F+(H4/(F+B4/F))
FLADD D,A
FLADD D,MC4
FLADD D,B4F
				;GET 1.0+A4/REST
DMOVE A,A4
FLDIV A,D
FLADD A,ONE

	JUMPE	G,SCALE		;MULTIPLY BY POWER OF TWO?
FLMUL A,POWERS(G)

SCALE:	FSC	A,.-.		;SCALE RESULTS
	FSC	B,@SCALE
	JFCL			;SUPPRESS UNDERFLOW MSG. FROM LOW WORD.
	FADL	A,B		;MAKE STANDARD NUMBER
DEXEND:	MOVS	X, XBLT		;PICK UP THE BLT POINTER
	BLT	X, X		;RESTORE THE ACCUMULATORS
	JRA	Q, 1(Q)		;EXIT

;CONSTANTS AND TEMPORARY LOCATIONS AND STUFF

XBLT:	XWD	C,ACSAVE

DCON1:	88.028
DLOG2E:	201561250731		;LOG OF E, BASE 2
	146225602774		;LOG2E = 1.44269 50408 88963 40740
TABLE:	0			;0
	040000000000		;1/8
	100000000000		;2/8
	140000000000		;3/8
	200000000000		;4/8
	240000000000		;5/8
	300000000000		;6/8
	340000000000		;7/8
ONE:				;DOUBLE PRECISION 1.0
POWERS:	1.0			;2**0 = 1.0
	0
	201427127017		;2**1/8 = 1.09050 77326 65257 65919
	146076521366
	201460337602		;2**2/8 = 1.18920 71150 02721 06671
	146430667052
	201513773265		;2**3/8 = 1.29683 95546 51009 66590
	146233052116
	201552023631		;2**4/8 = 1.41421 35623 73095 04878
	146477473631
	201612634520		;2**5/8 = 1.54221 08254 07940 824
	146425240667
	201656423746		;2**6/8 = 1.68179 28305 07429 086
	146255323533
	201725403067		;2**7/8 = 1.83400 80864 09342 463
	146175644416

A4:	206744575555		;A4 = 60.59319 17173 36463 11080
	153144433733
B4:	207535527021		;B4 = 87.41749 72022 35527 474
	154427561365
MC4:	572033202222		;MC4=-C4 = -30.29659 58586 68231 555
	152633344045
D4:	201414631463		;D4 = 1.05
	146146314632
H4:	210654261010		;H4 = 214.17286 81454 77042 3113
	155543353005

LIT

ACSAVE:	BLOCK	X-C+1

B4F:	BLOCK 	2	;TEMP FOR B4*F
FB4F:	BLOCK	2	;TEMP FOR F+B4*F

END

