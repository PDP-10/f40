TITLE ERROR.  V.30.0.212   ERROR ROUTINES-FORTRAN IV
SUBTTL	10-JUN-71	D. M. NIXON/DMN

;REENT==1 GIVES RE-ENTRANT FORTRAN OP SYSTEM /DMN
IFNDEF REENT,<REENT==0>
IFN REENT,<	HISEG	>
;WATCH==1 MEANS USER WILL USE WATCH COMMAND TO MONITOR CPU TIME
IFNDEF WATCH,<WATCH==0>

ENTRY	ERROR.,ERRFIN,ERRINI,ITYPM.
INTERN	LOGEN.,ILLCH.,INIER.,DEVER.,TBLER.
INTERN	MSNG.,NOROM.,LISTB.,REDER.,ENDTP.
INTERN	ILUUO.,BPHSE.,ILLMG.,NMLER.,DUMER.,ILRED.
INTERN	PARER.,WLKER.,BUFER.,RANER.
IFE REENT,<	ENTRY	TYPER.>
IFN REENT,<	ENTRY	.TYPER>
EXTERN	EXITP.,TEMP.,UUOH.,UUOL.,DEVIC.,FMTEN.,FMTBG.,INIT.
EXTERN	ERRTBL,ERRMAX,TIMXCT,ERRCNT,TIMDAY,DYNCH.,DEVNUM

MLON
;ACCUMULATORS

A=1				;UTILITY
B=2				;UTILITY
C=3				;UTILITY
D=4				;UTILITY
M=7				;POINTER TO BUFFER HEADER
I=11				;FLAG REGISTER
P=17				;PUSHDOWN POINTER
IFN REENT,<LOW=16>
IFE REENT,<LOW=0>

INTERN ERRLEN			;LOADER WILL OBJECT IF CHANGED
ERRLEN==20			;LENGTH OF ERROR TABLE

;EACH ERROR ROUTINE IS CALLED BY A PUSHJ P,

;ACCUMULATORS 2,7,11 AND 17 CONTAIN INFORMATION WHICH IS
;USED IN PRINTING OUT CERTAIN OF THE ERROR MESSAGES.

     

	SUBTTL	ERROR MESSAGE TYPE -OUT ROUTINE
%OP==(7B2)

%A==0			;ASCIZ
%AI==1			;ASCII WORD
%S==2			;SIXBIT WORD
%AC==3			;ASCII CHAR.
%SC==4			;SIXBIT CHARACTER
%O==5			;OCTAL
%D==6			;DECIMAL
%T==7			;TIME
%E==10			;ERRMSG
%OO==11			;OCTAL  BOTH HALVES

%J==(1B3)		;JUMP TO NEW ARG. LIST
%Q==(1B4)		;CR-LF-?
%L==(1B5)		;INDEX BY LOW SEGMENT OF SET

%%P==1			;PRLOC
%%F==2			;FMPT
%%CR==3			;TCRLF

SKPARG:	AOS	(P)		;SKIP THE NEXT ARG
NXTARG:	AOSA	(P)		;ADVANCE POINTER
JMPARG:	HRRM	A,(P)		;SET NEW POINTER

TYPARG:	LDB	A,[POINT 3,@(P),2]
	CAIE	A,7		;IS IT ERROR ARGUMENTS?
	POPJ	P,		;NO,SO JUST RETURN
	MOVE	A,@(P)		;GET ARG.
	TLNE	A,%J		;NEW ARG LIST?
	JRST	JMPARG		;YES
	TLNE	A,%Q		;CR-LF-?
	PUSHJ	P,CRLFQ		;YES
	TLNE	A,%L		;INDEX BY LOW SEGMENT
	ADDI	A,(LOW)		;YES
	LDB	C,[POINT 6,@(P),12]
	JRST	@TYPTAB(C)	;GO TO CORRECT ROUTINE

TYPTAB:	%A_14	,,ASCIZ.	;ASCIZ STRING
	%AI_14	,,ASCII.	;ASCII WORD
	%S_14	,,SIXBT.	;SIXBIT
	%AC_14	,,ASCIIC	;ASCII CHAR.
	%SC_14	,,SIXBTC	;SIXBIT CHAR.
	%O_14	,,OCTAL.	;OCTAL
	%D_14	,,DECIMAL	;DECIMAL
	%T_14	,,PNTTIM	;TIME
	%E_14	,,ERRMSG	;ERROR 
	%OO_14	,,OOCTAL	;OCTAL FULL WORD
     


ITYPM.:	MOVEI	A,DYNCH.(LOW)	;START OF DEVCHR TABLE
	HRLI	A,-17		;NUMBER OF POSSIBLE CHANNELS
	MOVE	B,(A)		;GET STORED WORD
	TLNN	B,(1B5)		;IS IT USER CONSOL TTY
	AOBJN	A,.-2		;NO TRY AGAIN
	SUBI	A,DYNCH.(LOW)	;GET CHANNEL NUMBER
	MOVSI	B,(CLOSE)	;SET UP CLOSE UUO
	DPB	A,[POINT 4,B,12];PUT IN CHANNEL NUMBER
	TRNN	A,-20		;JUST IN CASE
	XCT	B		;OUTPUT CURRENT TTY BUFFER
	JRST	TYPARG		;AND OUTPUT MESSAGE

TYPSXB:	ADDI	C," "		;MAKE ASCII
TYPCHR:	JUMPE	C,CPOPJ		;IGNORE NULS
	TTCALL	1,C
CPOPJ:	POPJ	P,

TYPMES:	TTCALL	3,(A)		;OUTPUT MESSAGE
	POPJ	P,

ASCIZ.:	TLNE	A,(@)		;INDIRECT BIT ON?
	MOVE	A,(A)		;YES
	PUSHJ	P,TYPMES

MOR2DO:	MOVE	A,@(P)		;GET ARG AGAIN
	TLNN	A,17		;FINISHED WITH IT?
	JRST	NXTARG		;YES,GET NEXT ARG
	LDB	C,[POINT 4,A,17]
	CAIG	C,NXTBLN	;VALID COMMAND?
	JRST	@NXTAB-1(C)	;YES, DO NEXT COMMAND
	JRST	NXTARG		;NO, TRY NEXT ARG

ASCII.:	HRLI	A,(POINT 7)	;FORM BYTE POINTER
	ILDB	C,A
	PUSHJ	P,TYPCHR
	TLNE	A,760000
	JRST	ASCII.+1
	JRST	MOR2DO

SIXBT.:	TLNE	A,(@)		;INDIRECT BIT ON?
	MOVE	A,(A)		;YES
	HRLI	A,(POINT 6)	;FORM BYTE POINTER TO WORD
SIXBT1:	ILDB	C,A
	PUSHJ	P,TYPSXB
	TLNE	A,770000	;TEST FOR END
	JRST	SIXBT1		;NOT THERE YET
	JRST	MOR2DO		;SEE IF FINISHED

ASCIIC:	MOVEI	C,(A)		;GET CHAR.
	JRST	SIXBTC+1

SIXBTC:	MOVEI	C,40(A)		;CONVERT TO ASCII
	PUSHJ	P,TYPCHR
	JRST	MOR2DO+2	;SEE IF FINISHED

OOCTAL:	HRLI	A,(POINT 3,)
	JRST	OCTAL.+1

OCTAL.:	HRLI	A,(POINT 3,,17)
	ILDB	C,A
	ADDI	C,"0"
	PUSHJ	P,TYPCHR
	TLNE	A,770000
	JRST	OCTAL.+1
	JRST	MOR2DO

DECIMA:	MOVE	B,(A)
	PUSHJ	P,ERRNUM
	JRST	MOR2DO

NXTAB:	%%P_14	,,PRLOC
	%%F_14	,,FMPT
	%%CR_14	,,TCRLF

	NXTBLN==.-NXTAB
     

;THIS SUBROUTINE PRINTS OUT THE FORMAT ASSOCIATED WITH THE ERROR
;THE BEG. ADD OF THE FORMAT IS IN FMTBG. THE END ADD.IS IN FMTEN.


FMPT:	PUSHJ	P,TYPARG
	%A,	CRLF	(%OP)
	LDB	B,[POINT 6,1(M),11]	;PICK UP MODE
	CAIN	B,44		;DON'T PRINT FORMAT IF BINARY
	JRST	PRLOC		;JUST USER LOC
	HRRZ	B,FMTEN.(LOW)	;END ADDRESS OF FORMAT
	HRRZ	A,FMTBG.(LOW)	;BEG. ADDRESS OF FORMAT
	SUBI	B,1(A)		;OBTAIN THE NO. OF WORDS IN THE FMT.
	IMULI	B,5		;OBTAIN THE TOTAL NO OF CHAR. IN FMT
	CAILE	B,^D72		;PRINT A MAX. OF 72 CHAR.
	MOVEI	B,^D72		;SET MAX. CHAR. AT 72
	MOVE	A,FMTBG.(LOW)	;POINTER TO FIRST CHAR. IN FMT.
	ILDB	C,A		;LOAD CHAR INTO AC
	PUSHJ	P,TYPCHR	;DEPOSIT CHARACTER INTO OUTPUT BUFFER
	SOJG	B,.-2		;GET ANOTHER CHAR. IF THERE IS ONE
PRLOC:	PUSHJ	P,USRLOC	;JUMP TO TYPE USERS LOCATION
CLSE:	AOS	B,ERRTBL+ERRLEN-1(LOW)	;GET LAST ERROR SLOT
	HLL	B,LSTERR	;FILL IN ADDRESS OF ERROR MESSAGE
	MOVEM	B,ERRTBL+ERRLEN-1(LOW)	;STORE BACK
	AOS	ERRCNT(LOW)	;BUMP TOTAL ERROR COUNT
	PUSHJ	P,EXITP.(LOW)	;CLOSE OUT USERS JOB, BUT DON'T CHANGE (LOW)


;END OF FILE ON INPUT
;THE DEV. NAME IS IN SIXBIT AND IS IN THE GLOBAL WORD DEVIC.

LOGEN.:	PUSHJ	P,ITYPM.
	%A,	[ASCIZ /
END OF FILE ON /] (%OP)      
	%S,	DEVIC.	(%OP+%L+%%F)

;A CHARACTER IN THE FORMAT STRING IS ILLEGAL.
;THE CHAR. IS IN SIXBIT AND IS IN AC 2.

ERROR.:	PUSHJ	P,ITYPM.
	%A,	ILCHAR	(%OP+%Q)	;ILLEGAL FORMAT MESSAGE
	%SC,	B	(%OP)		;TYPE CHAR.
	%A,	[ASCIZ / IN FORMAT/] (%OP+%%F)
     

	
;ILLEGAL CHARACTER IN INPUT STRING
;THE CHAR. IS IN SEVEN-BIT AND IS IN THE CURRENT INPUT BUFFER.
ILLCH.:	PUSHJ	P,ITYPM.
	%A,	ILCHAR	(%OP+%Q)
	LDB	C,1(M)		;GET ILLEGAL CHARACTER
	CAIL	C,40		;IS IT A NON-PRINTING CHAR.
	JRST	ILLCH1		;NO
	MOVE	B,C		;SAVE CHAR.
	MOVEI	C,"^"
	PUSHJ	P,TYPCHR
	MOVEI	C,100(B)	;RESTORE AS A PRINTING CHAR.
ILLCH1:	PUSHJ	P,TYPCHR	;TYPE IT
	PUSHJ	P,TYPARG
	%A,	[ASCIZ /,IN INPUT STRING /] (%OP+%%F)

;DEVICE NOT AVAILABLE ON INITIALIZATION
;THE DEV. NAME IS IN SIXBIT AND IN LOCATION INIT.+1

INIER.:	PUSHJ	P,ITYPM.
	%S,	INIT.+1	(%OP+%Q+%L)
	%A,	[ASCIZ /NOT AVAILABLE/] (%OP+%%P)

;NON-EXISTENT DEVICE SELECTED
;THE DEV. NO. IS IN OCTAL AND IS IN AC 0.

DEVER.:	PUSHJ	P,ITYPM.
	%A,	[ASCIZ /DEVICE NUMBER /] (%OP+%Q)
	%D,	0	(%OP)
	%A,	[ASCIZ / IS ILLEGAL/] (%OP+%%P)

;TOO MANY DEVICES REQUESTED

TBLER.:	PUSHJ	P,ITYPM.
	%A,	[ASCIZ /MORE THAN 15 DEVICES REQUESTED/] (%OP+%Q+%%P)


     

;LOOKUP OR ENTER  ERROR
;THE FILE NAME IS IN SIXBIT AND IS IN THE GLOBAL WORD TEMP.
;THE DEV. NAME IS IN SIXBIT AND IS IN THE GLOBAL WORD DEVIC.

NOROM.:	HRRZ	0,TEMP.+1(LOW)	;GET ERROR CODE
	JUMPN	0,MSNG1		;COMMON ERROR IF NOT CODE 0
	MOVEI	0,[ASCIZ /(0) NO ROOM/]
	JRST	MSNG2		;JOIN ERROR PRINTER

MSNG.:	HRRZ	0,TEMP.+1(LOW)	;GET ERROR CODE
MSNG1:	ADDI	0,TABLE		;GET MESSAGE
	CAILE	0,TABLND	;IN BOUNDS?
	MOVEI	0,TABLND	;NO, USE CATCHALL MESSAGE
	MOVE	0,@0		;GET ADDRESS OF MESSAGE
MSNG2:	PUSHJ	P,ITYPM.
	%A,	[ASCIZ /FILE /] (%OP+%Q)
	%S,	TEMP.	(%OP+%L)
	%A,	[ASCIZ / ON DEVICE /] (%OP)
	%S,	DEVIC.	(%OP+%L)
	%A,	@0	(%OP+%%P)

TABLE:	[ASCIZ / (0) WAS NOT FOUND/]
	[ASCIZ / (1) NO DIRECTORY FOR PROJECT-PROGRAMMER NUMBER/]
	[ASCIZ / (2) PROTECTION FAILURE/]
	[ASCIZ / (3) FILE WAS BEING MODIFIED/]
	[ASCIZ / (4) RENAME FILE NAME ALREADY EXISTS/]
	[ASCIZ / (5) ILLEGAL SEQUENCE OF UUOS/]
	[ASCIZ / (6) BAD UFD OR BAD RIB/]
	[ASCIZ / (7) NOT A SAV FILE/]
	[ASCIZ / (10) NOT ENOUGH CORE/]
	[ASCIZ / (11) DEVICE NOT AVAILABLE/]
	[ASCIZ / (12) NO SUCH DEVICE/]
	[ASCIZ / (13) NOT TWO RELOC REG. CAPABILITY/]
	[ASCIZ / (14) NO ROOM OR QUOTA EXCEEDED/]
	[ASCIZ / (15) WRITE LOCK ERROR/]
	[ASCIZ / (16) NOT ENOUGH MONITOR TABLE SPACE/]
	[ASCIZ / (17) PARTIAL ALLOCATION ONLY/]
	[ASCIZ / (20) BLOCK NOT FREE ON ALLOCATION/]

TABLND:	[ASCIZ / (?) LOOKUP, ENTER, OR RENAME ERROR/]
     

;WRITE PROTECTION ERROR
;THE DEV. NAME IS IN SIXBIT AND IS IN THE GLOBAL WORD DEVIC.

WLKER.:	PUSHJ	P,ITYPM.
	%S,	DEVIC.	(%OP+%Q+%L)
	%A,	[ASCIZ /  WRITE PROTECTED/] (%OP+%%P)

;DATA LIST TOO LONG ON BINARY TAPE READ
;THE DEV. NAME IS IN SIXBIT AND IS IN THE GLOBAL WORD DEVIC.

LISTB.:	PUSHJ	P,ITYPM.
	%A,	[ASCIZ /TAPE RECORD TOO SHORT ON UNIT /] (%OP+%Q)
	%S,	DEVIC.	(%OP+%L+%%P)


;DATA MISSED ERROR
;THE DEV. NAME IS IN SIXBIT AND IS IN THE GLOBAL WORD DEVIC.
;AC 11 IS THE FLAG WHICH SAYS EITHER INPUT OR OUTPUT



REDER.:	LSH	I,-43		;INPUT OR OUTPUT BIT
	MOVE	B,IN(I)		;MOVE INPUT OR OUTPT MESS. TO B
	PUSHJ	P,ITYPM.
	%S,	B	(%OP+%Q)
	%A,	[ASCIZ /DEVICE ERROR ON /] (%OP)
	%S,	DEVIC.	(%OP+%L+%%P)
     

;END OF TAPE
;THE DEV. NAME IS IN SIXBIT AND IS IN THE GLOBAL WORD DEVIC.

ENDTP.:	PUSHJ	P,ITYPM.
	%A,	[ASCIZ /END OF TAPE ON /] (%OP+%Q)
	%S,	DEVIC.	(%OP+%L+%%P)

;BINARY MODE PHASE ERROR
;THE DEV. NAME IS IN SIXBIT AND IS IN THE GLOBAL WORD DEVIC.

BPHSE.:	PUSHJ	P,ITYPM.
	%A,	[ASCIZ /ILLEGAL PHYSICAL RECORD COUNT, TAPE /] (%OP+%Q)
	%S,	DEVIC.	(%OP+%L+%%P)

;ILLEGAL MAG TAPE OPERATION
;THE DEV. NAME IS IN SIXBIT AND IS IN THE GLOBAL WORD DEVIC.

ILLMG.:	PUSHJ	P,ITYPM.
	%A,	[ASCIZ /ILLEGAL MAGNETIC TAPE OPERATION, TAPE /] (%OP+%Q)
	%S,	DEVIC.	(%OP+%L+%%P)

;NAMELIST SYNTAX ERROR

NMLER.:	PUSHJ	P,ITYPM.
	%A,	[ASCIZ /NAMELIST SYNTAX ERROR/] (%OP+%Q+%%P)

;REREAD DONE BEFORE READ

ILRED.:	PUSHJ	P,ITYPM.
	%A,	[ASCIZ /REREAD EXECUTED BEFORE FIRST READ/] (%OP+%Q+%%P)

;PARITY ERROR
;THE DEV. NAME IS IN SIXBIT AND IS IN THE GLOBAL WORD DEVIC.

PARER.:	PUSHJ	P,ITYPM.
	%A,	[ASCIZ /PARITY ERROR ON /] (%OP+%Q)
	%S,	DEVIC.	(%OP+%L+%%P)

;DUMMY ROUTINE LOADED INSTEAD OF REAL ONE
;AC 2 CONTAINS THE ADD. OF THE PROG. NAME 

DUMER.:	MOVE	B,0(B)		;GET PROG. NAME FROM DUMMY ROUTINE
	PUSHJ	P,ITYPM.
	%AI,	B	(%OP+%Q)
	%A,	[ASCIZ / NOT LOADED/] (%OP+%%P)
     

;ILLEGAL USER UUO TO FORTRAN OP SYSTEM
;AC 0 CONTAINS THE ADD. OF THE UUO WHICH IS IN OCTAL.
;THE USERS LOC. IS IN THE GLOBAL UUOH.(LOW) AND IS IN OCTAL.



ILUUO.:	SOS	UUOH.(LOW)	;P.C. NOW POINTS TO USERS LOC
	MOVE	B,@UUOH.(LOW)	;CONTENTS OF UUOH.
	MOVE	0,UUOH.(LOW)	;AND ADDRESS OF UUO
	PUSHJ	P,ITYPM.
	%A,	[ASCIZ /ILLEGAL USER UUO /] (%OP+%Q)
	%OO,	B	(%OP)
	%A,	[ASCIZ /AT USER /] (%OP)
	%O,	0	(%OP)
	JRST	CLSE		;EXIT FROM PROGRAM.

;PRINT USER LOCATION
;THE USERS LOC. IS IN THE GLOBAL UUOH.(LOW) AND IS IN OCTAL.

USRLOC:	SOS	UUOH.(LOW)	;P.C. NOW POINTS TO USER'S LOCATION+0
	MOVE	0,UUOH.(LOW)	;GET ADDRESS
	PUSHJ	P,ITYPM.
	%A,	[ASCIZ /
LAST FORTRAN I-O AT USER LOC /] (%OP)
	%O,	0	(%OP)
	POPJ	P,

     

;NOT ENOUGH CORE FOR BUFFERS, CAUSED BY BUFFER PROGRAM OR RANDOM ACCESS

BUFER.:	PUSHJ	P,ITYPM.
	%A,	[ASCIZ /NOT ENOUGH CORE FOR BUFFERS/] (%OP+%Q+%%P)


;RANDOM ACCESS DEVICE MUST BE DSK TYPE
;DEVICE NUMBER IS IN DEVNUM IN OCTAL

RANER.:	PUSHJ	P,ITYPM.
	%A,	[ASCIZ /DEVICE NUMBER /] (%OP+%Q)
	%D,	DEVNUM		(%OP+%L)
	%A,	[ASCIZ / MUST BE DSK FOR RANDOM ACCESS/] (%OP+%%P)
     



ILCHAR:	ASCIZ	/ILLEGAL CHARACTER /

CRLF:	ASCIZ	/
/
TCRLF:	MOVEI	A,CRLF
	PUSHJ	P,TYPMES
	JRST	NXTARG


CRLFQ:	MOVEI	A,[ASCIZ /
? /]
	PUSHJ	P,TYPMES
	MOVE	A,@-1(P)
	POPJ	P,


IN:	SIXBIT	/INPUT/
	SIXBIT	/OUTPT/


     

;INITIALIZE ERROR ROUTINE- PUSHJ P,ERRINI
;TABLE IS CLEARED BY RESET. UUO IN FORSE

OPDEF  MSTIME [CALLI 23]	;GET TIME OF DAY IN MILLISECONDS
OPDEF RUNTIM [CALLI 27]		;GET EXECUTION TIME IN MILLISECONDS

ERRINI:
IFE WATCH,<MSTIME A,
	MOVEM	A,TIMDAY(LOW)	;GET TIME OF DAY (MILLISECONDS)
	MOVEI	A,0
	RUNTIME	A,		;GET TOTAL RUNTIME SO FAR
	MOVEM	A,TIMXCT(LOW)	; AND SAVE AS EXECUTION TIME>
	MOVEI	0,2
	MOVEM	0,ERRMAX(LOW)	;SET UP MAXIMUM ERROR NUMBER
	POPJ	P,		;RETURN

;THIS IS THE PRELIMINARY ERRMSG ROUTINE TO BE USED BY
;OVTRAP, TYPER., AND MISC. MATH ROUTINES IN LIB40.

ERRMSG:	MOVE	A,(A)		;GET ERROR POINTERS
	TLNN	A,-1		;STANDARD ERROR MESSAGE NEEDED?
	MOVE	A,NO.TAB-1(A)	;YES, GET STANDARD MESSAGE
	HRRZ	B,A		;GET ERROR NUMBER ONLY
	CAILE	B,0		;TEST FOR INSIDE TABLE RANGE
	CAILE	B,ERRLEN
	JRST	ERRMS2		;OUTSIDE
IFN REENT,<ADDI	A,(LOW)>
	HRRZ	B,ERRTBL-1(A)	;GET ERROR COUNT
	CAIE	B,777777	;WILL INDEXING IT OVERFLOW?
	AOS	ERRTBL-1(A)	;NO, DO SO
	HLLM	A,ERRTBL-1(A)	;SAVE ADDRESS IN TABLE
	AOS	ERRCNT(LOW)	;INDEX ERROR COUNTER
	CAML	B,ERRMAX(LOW)	;PRINT MESSAGE IF NOT TOO MANY ERRORS
	JRST	SKPARG		;SUPPRESS TYPE OUT
ERRMS2:	MOVE	B,A
	MOVEI	A,CRLF
	PUSHJ	P,TYPMES
	HLRZ	A,B
	PUSHJ	P,TYPMES
	MOVEI	A,[ASCIZ /	PC=/]
	PUSHJ	P,TYPMES
	JRST	MOR2DO

     

;TYPE EXECUTION SUMMARY
ERRFIN:	SKIPGE	ERRMAX		;NO SUMMARY IF ERRMAX<0
	POPJ	P,		;NO SUMMARY
	TTCALL	13,0		;TURN OFF ^O, SOMETIMES
	JFCL
IFE WATCH,<SETZ	B,
	RUNTIME	B,		;GET TOTAL RUN TIME
	SUB	B,TIMXCT(LOW)	;GET TIME FOR THIS PROGRAM
	PUSHJ	P,TYPARG
	%A,	[ASCIZ /

CPU TIME: /] (%OP)
	%T,	B	(%OP)
	MSTIME	B,		;GET TIME OF DAY
	SUB	B,TIMDAY(LOW)	;GET TIME FOR THIS PROGRAM
	JUMPGE	B,.+2
	ADD	B,[^D1000*^D3600*^D24]	;ADD MILLISECONDS IN A DAY
	PUSHJ	P,TYPARG
	%A,	[ASCIZ /	ELAPSED TIME: /] (%OP)
	%T,	B	(%OP)

>
	SKIPN	ERRCNT(LOW)	;ANY ERRORS?
	JRST	ERRFN9		;NO, SAY SO
	PUSHJ	P,TYPARG
	%A,	[ASCIZ /

NO. OF ERRORS		ERROR TYPE
/]	(%OP)
	MOVSI	D,-ERRLEN	;GET LENGTH OF TABLE
IFN REENT,<ADDI	D,(LOW)>
ERRFN1:	HRRZ	B,ERRTBL(D)	;GET ERROR COUNT FOR THIS MESSAGE
	JUMPE	B,ERRFN2	;TRANSFER IF NONE
	PUSHJ	P,ERRNUM	;PRINT NUMBER
	MOVEI	C,11		;PRINT TAB
	PUSHJ	P,TYPCHR
	PUSHJ	P,TYPCHR
	HLRZ	A,ERRTBL(D)	;GET ADDRESS OF MESSAGE
	PUSHJ	P,TYPMES	;PRINT MESSAGE
	MOVEI	A,CRLF		;FINISH WITH CR-LF
	PUSHJ	P,TYPMES
ERRFN2:	AOBJN	D,ERRFN1	;LOOP UNTIL FINISHED
	POPJ	P,		;ERROR SUMMARY COMPLETED

ERRFN9:	PUSHJ	P,TYPARG
	%A,	[ASCIZ /
NO EXECUTION ERRORS DETECTED
/]	(%OP)
	POPJ	P,		;ERROR SUMMARY COMPLETED

     

;PRINT TIME IN FORMAT - HH:MM:SS.HH

PNTTIM:	MOVE	B,(A)
	ADDI	B,5		;ROUND NUMBER TO HUNDREDTHS OF SECONDS
	IDIVI	B,^D1000	;CHANGE MILLISECONDS INTO SECONDS
	PUSH	P,B+1		;SAVE THOUSANDTHS OF A SECOND
	IDIVI	B,^D60		;CHANGE SECONDS TO MINUTES
	PUSH	P,B+1		;SAVE SECONDS
	JUMPE	B,PNTTM2	;SUPPRESS MINUTES IF NONE
	IDIVI	B,^D60		;CHANGE MINUTES TO HOURS
	PUSH	P,B+1		;SAVE MINUTES
	JUMPE	B,PNTTM1	;SUPPRESS HOURS IF NONE
	PUSHJ	P,ERRNUM	;PRINT HOURS
	MOVEI	C,":"		;SEPARATE BY COLON
	PUSHJ	P,TYPCHR
PNTTM1:	POP	P,B		;GET MINUTES BACK
	PUSHJ	P,ERRNUM	;PRINT MINUTES
	MOVEI	C,":"		;SEPARATE BY COLON
	PUSHJ	P,TYPCHR
PNTTM2:	POP	P,B		;GET SECONDS BACK
	PUSHJ	P,ERRNUM	;PRINT INTEGER PART
	MOVEI	C,"."
	PUSHJ	P,TYPCHR	;TYPE DECIMAL POINT
	POP	P,B		;GET THOUSANDS BACK
	IDIVI	B,^D10		;CHANGE TO HUNDREDTHS
	MOVEI	A,2		;FORCE TWO DIGITS OUT
	PUSHJ	P,ERRNM1	;TYPE TWO DIGITS
	JRST	MOR2DO		;SEE IF FINISHED

;TYPE A DECIMAL NUMBER
ERRNUM:	SETZ	A,		;FOR THIS ENTRY FORCE NO DIGITS OUT
ERRNM1:	IDIVI	B,^D10
	HRLM	B+1,(P)
	SOJG	A,.+2
	JUMPE	B,.+2
	PUSHJ	P,ERRNM1
	HLRZ	C,(P)
	ADDI	C,"0"
	JRST	TYPCHR		;OUTPUT THE CHARACTER
     

SUBTTL	STANDARD MESSAGES

NO.TAB:
	[ASCIZ /INTEGER OVERFLOW/]	,,1
	[ASCIZ /INTEGER DIVIDE CHECK/]	,,2
	[ASCIZ /FLOATING OVERFLOW/]	,,3
	[ASCIZ /FLOATING UNDERFLOW/]	,,4
	[ASCIZ /FLOATING DIVIDE CHECK/]	,,5
;	0				,,6
;	0				,,7
;	0				,,10
LSTERR:	[ASCIZ ?FATAL I/O ERROR?]	,,ERRLEN


;OVER/UNDERFLOW ERROR TYPEOUT (MIMIC OVTRAP)
;NO NUMBER FIXUPS ARE DONE.
;TYPER. EXPECTS ITS ARGUMENT IN AC 0

IFE REENT,<TYPER.:>
IFN REENT,<.TYPER:>
	EXCH	D,(P)		;GET PC INTO D
	SUBI	D,1		;GET ADDRESS OF PUSHJ
	PUSH	P,B		;SAVE AN AC
	PUSH	P,C
	TLNE	0,-1		;DO WE NEED A MESSAGE FIX UP?
	JRST	.+3		;NO, MESSAGE SUPPLIED
	MOVE	C,0		;CANNOT INDEX WITH AC0
	MOVE	0,NO.TAB-1(C)	;GET STANDARD MESSAGE
	TRNN	0,-1		;FATAL I/O ERROR?
	HRROS	D		;SIGNAL TO GO TO CLSE
	PUSHJ	P,ITYPM.
	%E,	0	(%OP)	;NO. OF MESSAGE IN AC0
	%O,	D	(%OP+%%CR)	;PC IN D
	POP	P,C
	POP	P,B		;RESTORE AC
	AOJL	D,CLSE		;RESTORE PC, JUMP IF FATAL I/O ERROR
	EXCH	D,(P)		;RESTORE D
IFN REENT,<XCT	UUOL.(LOW)	;RESTORE AC16>
	POPJ	P,		;RETURN


	END
     


