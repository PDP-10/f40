	TITLE	CFMP V.027
	SUBTTL	17-JUL-70	KAREN KOLLING/DMN
;FROM	V.021	16-OCT-70

;COMPLEX FLOATING MULTIPLY ROUTINE.

;THIS ROUTINE MULTIPLIES TWO COMPLEX NUMBERS ACCORDING
;TO THE RULE:

; (A+IB)*(C+ID)=(A*C-B*D)+I*(B*C+A*D)

;IF EITHER PRODUCT IN EITHER TERM OVER OR UNDERFLOWS,
;A JUMP IS MADE TO A SPECIAL CASE CALCULATION. OVER
;AND UNDERFLOW ERROR MESSAGES ARE RETURNED ONLY IF THE
;ENTIRE TERM OVER OR UNDERFLOWS.

;THERE ARE TWO SETS OF ENTRY POINTS TO THIS ROUTINE:
;THE MULTIPLY, AND THE MULTIPLY-TO-MEMORY.
;THE CALLING SEQUENCE FOR THE MULTIPLY ROUTINES IS AS
;FOLLOWS:
;	MOVEI	16,ARG2
;	PUSHJ	17,CFM.N
;WHERE N=0,2,4,OR 6. ARG1 IS ASSUMED TO BE IN
;AC'S N AND N+1, AND THE RESULTS ARE LEFT IN AC'S N AND N+1.
;THE CALLING SEQUENCE FOR THE MULTIPLY TO MEMORY ROUTINES IS AS
;FOLLOWS:
;	MOVEI	16,ARG2
;	PUSHJ	17,CFM.N
;WHERE N AND ARG1 ARE AS BEFORE AND THE RESULTS ARE
;LEFT IN ARG2 AND ARG2+1.

	ENTRY	CFM.0,CFM.2,CFM.4,CFM.6,CFMM.0,CFMM.2,CFMM.4,CFMM.6
	EXTERN	TYPER.


	SIXBIT/CFM.6/
CFM.6:	HRLI	16,6		;SET UP THE ADDRESS WORD.
	JRST	CFM.0		;GO TO MAIN ROUTINE.

	SIXBIT/CFM.4/
CFM.4:	HRLI	16,4		;SET UP THE ADDRESS WORD.
	JRST	CFM.0		;GO TO MAIN ROUTINE.

	SIXBIT/CFM.2/
CFM.2:	HRLI	16,2		;SET UP THE ADDRESS WORD.
	JRST	CFM.0		;GO TO MAIN ROUTINE.

	SIXBIT/CFMM.6/
CFMM.6:	HRLI	16,6		;SET UP THE ADDRESS WORD.
	JRST	CFMM.0		;GO TO MEMORY ROUTINE.

	SIXBIT/CFMM.4/
CFMM.4:	HRLI	16,4		;SET UP THE ADDRESS WORD.
	JRST	CFMM.0		;GO TO MEMORY ROUTINE.

	SIXBIT/CFMM.2/
CFMM.2:	HRLI	16,2		;SET UP THE ADDRESS WORD.
	JRST	CFMM.0		;GO TO MEMORY ROUTINE.

	SIXBIT/CFMM.0/
CFMM.0:	MOVSS	16		;SET UP THE ADDRESS WORD.
	JRST	CFM.0		;GO TO MAIN ROUTINE.

	SIXBIT/CFM.0/
CFM.0:	MOVEM	0,ARG11		;STORE REAL (2ND ARG) IN
	MOVE	0,(16)		;ARG 21 AND
	MOVEM	0,ARG21		;IMAG (2ND ARG)
	MOVE	0,1(16)		;IN
	MOVEM	0,ARG22		;ARG22
	MOVE	0,ARG11		;AND
	MOVSS	16		;REAL (1ST ARG)
	MOVE	0,(16)		;IN ARG11
	MOVEM	0,ARG11		;AND IMAG (1ST ARG)
	MOVE	0,1(16)		;IN
	MOVEM	0,ARG12		;ARG12.
	MOVEM	2,SAVE2		;SAVE THE CONTENTS OF AC2.
	MOVEM	3,SAVE3		;SAVE THE CONTENTS OF AC3.
	PUSHJ	17,CALC		;CALC (A*C-B*D)
	MOVEM	0,REAL		;SAVE REAL (ANS) IN REAL.
	MOVE	0,ARG12		;SET UP
	EXCH	0,ARG11		;AND CALCULATE
	MOVNM	0,ARG12		;(B*C+A*D)
	PUSHJ	17,CALC		;AND LEAVE IT IN AC0.
	MOVE	2,SAVE2		;RESTORE THE CONTENTS OF AC2.
	MOVE	3,SAVE3		;RESTORE THE CONTENTS OF AC3.
	MOVEM	0,1(16)		;SET UP IMAG (ANS).
	MOVE	0,REAL		;SET UP
	MOVEM	0,(16)		;REAL (ANS).
	POPJ	17,		;RETURN.



CALC:	MOVE	0,ARG11		;"A" TO AC0.
	MOVE	2,ARG12		;"B" TO AC2.
	FMPR	0,ARG21		;CALC A*C AND IF
	JFCL	OUFLO1		;IT OVER/UNDERFLOWS, GO TO OUFLO1.

SECOND:	FMPR	2,ARG22		;CALC B*D AND IF
	JFCL	OUFLO2		;IT OVER/UNDERFLOWS, GO TO OUFLO2.
	FSBR	0,2		;CALC A*C-B*D AND
	POPJ	17,		;RETURN.

OUFLO1:	MOVE	3,ARG22		;"D" TO AC3.
	SKIPN	0		;JUMP IF OVERFLOW.
	JRST	UNDER1		;UNDERFLOW, GO TO UNDER1
	FMPRB	2,3		;CALC B*D AND
	JFCL	OFL1OU		;IF OVER/UNDERFLOW GO TO OFL1OU.
	XOR	3,0		;OVERFLOW + NORMAL CASE
	TLNN	3,400000	;IF THE SIGNS ARE THE SAME, GO
	JRST	SROVNM		;TO SROVNM.O'E, GO TO INFIN.
INFIN:	MOVEM	0,ANSTMP	;STORE ANSWER.
	MOVEI	0,3		;RETURN AN
	PUSHJ	17,TYPER.	;ERROR MESSAGE.
	MOVE	0,ANSTMP	;PICK UP ANSWER.
	POPJ	17,		;RETURN.
OFL1OU:	JUMPE	2,INFIN		;OVERFLOW + UNDERFLOW CASE GOES TO INFIN.
	XOR	3,0		;OVERFLOW + OVERFLOW CASE.
	TLNN	3,400000	;IF THE SIGNS ARE THE
	JRST	SROVOV		;SAME, GO TO SROVOV,
	JRST	INFIN		;O'E, GO TO INFIN.
SROVNM:	JUMPE	2,INFIN		;OVERFLOW + ZERO, GO TO INFIN.
	MOVE	0,ARG21		;C TO AC0.
	FDVRI	0,202400	;CALC. C/2.
	FMPR	0,ARG11		;CALC. (C/2)*A AND IF
	JFCL	1,[POPJ 17,]	;IT OVERFLOWS, IMMEDIATELY RETURN.
	FSBRM	0,2		;CALC ((C/2*A)-(B*D).
	FADR	0,2		;CALC (A*C-B*D) AND
	POPJ	17,		;RETURN.
SROVOV:	MOVE	0,ARG21		;C TO AC0.
	FDVR	0,ARG22		;CALC. (C/D).
	MOVE	1,ARG12		;B TO AC1.
	FDVR	1,ARG11		;CALC. (B/A).
	FSBR	0,1		;CALC. ((C/D)-(B/A)) AND
	JFCL	FIXUP		;IF IT UNDERFLOWS, GO TO FIXUP.
	FMPR	0,ARG22		;CALC. ((C)-(B/A)*D)) AND
	JFCL			;SUPPRESS OVERFLOW MESSAGE.
	FMPR	0,ARG11		;CALC (A*C-B*D) AND
	POPJ	17,		;RETURN.
FIXUP:	FMPR	1,ARG22		;CALC. ((B/A)*D).
	MOVE	0,ARG21		;C TO AC0.
	FSBR	0,1		;CALC. (C-(B/A)*D).
	FMPR	0,ARG11		;CALC. (A*C-B*D) AND
	POPJ	17,		;RETURN.

UNDER1:	FMPR	2,3		;CALC. B*D AND GO
	JFCL	U1OU		;TO U1OU IF OVER/UNDERFLOW.
	MOVM	3,2		;IF B*D IS <2**-105,
	CAMGE	3,[030400000000] ;GO
	JRST	.+3		;TO .+3.
	MOVN	0,2		;NO BITS CAN BE SAVED,
	POPJ	17,		;FIX SIGN AND RETURN.
	FMPRI	2,232400	;CALC B*D*(2**27).
UNDR1:	MOVE	0,ARG11		;CALC
	FMPRI	0,232400	;A*C*(2**27)
	FMPR	0,ARG21		;AND SUPPRESS AN
	JFCL			;ERROR MESSAGE.
	FSBR	0,2		;CALC (2**27)(A*C-B*D),
	FDVRI	0,232400	;CALC (A*C-B*D) AND
	POPJ	17,		;RETURN.

U1OU:	JUMPE	2,.+3		;IF OVERFLOW + UNDERFLOW, GO
	MOVNM	2,ANSTMP	;TO ERROR
	JRST	INFIN+1		;RETURN.
	MOVE	2,ARG12		;O'E, TRY TO SAVE BITS.
	FMPRI	2,232400	;CALC. B*(2**27).
	FMPR	2,ARG22		;CALC B*D*(2**27)
	JFCL			;AND SUPPRESS UNDERFLOW MESSAGE
	MOVE	0,ARG11		;CALC. A*(2**27) AND
	FMPRI	0,232400	;A*(2**27)*C
	FMPR	0,ARG21		;AND SUPPRESS
	JFCL			;UNDERFLOW MESSAGE.
	JUMPN	2,UNDR1+4	;IF BOTH UNDERFLOW, RETURN
	JUMPN	0,UNDR1+5	;AN ERROR MESSAGE. O'E,
	MOVEI	0,4		;GO TO
	PUSHJ	17,TYPER.	;MORE
	SETZ	0,		;CLEAR AC0
	POPJ	17,		;CALC.

OUFLO2:	JUMPN	2,.+11		;JUMP AHEAD IF (B*D) OVERFLOWED.
	CAML	0,[030400000000] ;IF NO BITS CAN BE SAVED,
	POPJ	17,		;RETURN.
	FMPRI	0,232400	;CALC. (2**27)*(A*C)
	MOVE	2,ARG12		;AND
	FMPRI	2,232400	;THEN
	FMPR	2,ARG22		;(2**27)*(B*D)
	JFCL			;AND GO TO THE REST
	JRST	UNDR1+4		;OF THE CALC.
	MOVEM	2,1		;OVERFLOW + NORMAL.
	XOR	1,0		;IF THE SIGNS ARE THE SAME,
	TLNN	1,400000	;GO TO SROVN; O'E
	JRST	SROVN		;SET UP
	MOVNM	2,ANSTMP	;THE ANSWER AND
	JRST	INFIN+1		;GO TO ERROR EXIT.
SROVN:	MOVE	3,ARG22		;"D" TO AC3.
	FDVRI	3,202400	;CALC (D/2).
	FMPR	3,ARG12		;CALC (B*(D/2)) AND IF
	JFCL	FIXUP2		;IT OVERFLOWS, GO TO FIXUP2.
	FSBR	0,3		;CALC. ((A*C)-(B*(D/2))).
	FSBR	0,3		;CALC (A*C-B*D) AND
	POPJ	17,		;RETURN.
FIXUP2:	MOVNM	3,ANSTMP	;SET UP THE ANSWER
	JRST	INFIN+1		;AND GO TO ERROR EXIT.

ARG11:	0
ARG12:	0
ARG21:	0
ARG22:	0
REAL:	0
ANSTMP:	0
SAVE2:	0
SAVE3:	0
	END

