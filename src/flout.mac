TITLE FLOUT.   	FLOATING POINT OUTPUT	FORTRAN IV
SUBTTL	V31(226)	3-AUG-71	D. M. NIXON

;COPYRIGHT 1971 ,DIGITAL EQUIPMENT CORP. MAYNARD,MASS.,U.S.A.

;REENT==1 FOR RE-ENTRANT OPERATING SYSTEM
IFNDEF REENT,<REENT==0>
IFN REENT,<	HISEG	>
IFNDEF ASTFL,<ASTFL==1	;GIVES ASTERISK CONVERSION ON FORMAT OVERFLOW>

;"FLOUT." IS A ROUTINE WHICH OUTPUTS FLOATING POINT NUMBERS, IN
;E, F, OR G FORMAT.  THE NUMBERS ARE CONTAINED IN AC0 ON ENTRY.
;"DEPOT." IS AN EXTERNAL ROUTINE WHICH OUTPUT THE CHARS IN AC0;

;  CALLING SEQUENCE:
;	PUSHJ P,FLOUT.
;  PUSH DOWN LIST CONTAINS:
;	1.  FORMAT WORD CONSTRUCTED AS FOLLOWS:
;	    BIT 0:  0 = F TYPE CONVERSION
;	            1 = E TYPE CONVERSION
;	        1:  1 = G TYPE CONVERSION
;	     4-10:  D - NO. OF DIGITS FOLLOWING THE DECIMAL POINT
;	    11-17:  W - FIELD WIDTH; W=0, VARIABLE FIELD
;	    18-35:  N - SCALE FACTOR
;	2.  PROGRAM COUNTER

	NA==15		;NO. OF AC'S TO BE STORED
	AC0=0		;FLOATING POINT NO. ON ENTRY
	AC1=1		;USED IN FORMING DIGITS
	F=2		;FLAG AND FORMAT WORD
	XP=3		;DECIMAL EXPONENT
	W=4		;FIELD WIDTH/NO. OF BLANKS TO OUTPUT
	D=5		;D, NO. OF DIGITS AFTER DEC. POINT
	C=6		;CNTR./NO. OF CHARS BEFORE DEC. POINT
	G==7		;UNUSED,NEEDED BY DEPOT...RESTORED AT END
	SF=10		;SCALE FACTOR
	T=11		;TEMP
	T1=12
	T2=13
	T3=14
	T4=15
	P=17		;PUSHDOWN POINTER

	ETYPE==(1B0)	;E TYPE CONVERSION (NOT F)
	GTYPE==(1B1)	;G TYPE CONVERSION
	NUMSGN==(1B2)	;NEGATIVE NUMBER
	EXPSGN==(1B3)	;EXPONENT SIGN
	DIGEXH==(1B4)	;DIGITS EXHAUSTED
	NOSIGN==(1B5)	;NO SPACE FOR + SIGN

	MAXDIG==9	;MAXIMUM NO. OF DIGITS TO OUTPUT
	MLON		;FOR OLD MACRO

	ENTRY	FLOUT.
	EXTERN	DEPOT.
IFN ASTFL,<EXTERN	ASTRK.>

FLOUT.:	PUSH	P,1		;STORE ACCS ON STACK
	MOVEI	1,1(P)
	HRLI	1,2
	ADD	P,[NA,,NA]
	BLT	1,(P)
	MOVE	F,-2-NA(P)	;PICK UP FORMAT WORD
	TLZ	F,NUMSGN!EXPSGN!DIGEXH!NOSIGN
	SETZB	XP,SF		;CLEAR EXPONENT AND SCALE FACTOR
	TLNN	F,GTYPE		;IGNORE SCALE FACTOR FOR NOW IF G CONVERSION
	HRRE	SF,F		;GET SCALE FACTOR
	JUMPGE	AC0,FLOUT1	;NUMBER NEGATIVE?
	MOVN	AC0,AC0		;YES, NEGATE IT
	TLOA	F,NUMSGN	;AND - SET SIGN FLAG

FLOUT1:	JUMPE	AC0,FLOUT7	;ESCAPE IF ZERO
	MOVE	T,AC0
	CAML	AC0,STEN0	;NUMBER < 1.0?
	JRST	FLOUT2		;NO
	CAML	AC0,STENM1	;NUMBER < 0.1?
	JRST	FLOUT7		;NO - IN RANGE
	TLO	F,EXPSGN	;YES - SET RANGE FLAG
	CAMGE	AC0,[002663,,437347]
	JRST	FLOUT5		;AVOID OVERFLOW ON VERY SMALL NO.
	MOVSI	T,(1.0)		;YES
	FDVR	T,AC0		;TAKE RECIPROCAL

FLOUT2:	HRLI	XP,-^D38	;LOAD COUNTER

FLOUT3:	CAML	T,STEN1(XP)	;COMPARE WITH TABLE
	AOBJN	XP,FLOUT3	;UNTIL LARGER ENTRY FOUND
	JUMPL	XP,FLOUT4	;ENTRY FOUND?
	TLNE	F,EXPSGN
	JRST	FLOUT6		;NO - LOW RANGE?
	FDVR	AC0,STEN38	;NO
	FDVR	AC0,STEN1	;DIVIDE BY 1.0E39
	AOJA	XP,FLOUT7
FLOUT4:	ANDI	XP,-1		;ENTRY FOUND - CLEAR OUT COUNT
	TLNE	F,EXPSGN
	JRST	FLOUT6		;LOW RANGE
	FDVR	AC0,STEN1(XP)	;NO - DIVIDE TO BRING INTO RANGE
	AOJA	XP,FLOUT7	;AND CORRECT EXPONENT

FLOUT5:	MOVEI	XP,^D38		;DEAL WITH OVERFLOW IN RECIPROCAL

FLOUT6:	FMPR	AC0,STEN0(XP)	;LOW RANGE - MULTIPLY TO BRING INTO RANGE

FLOUT7:	LDB	W,[POINT 7,F,17]
	LDB	D,[POINT 7,F,10]
	JUMPN	W,.+3
	MOVEI	W,17
	MOVEI	D,7
FLOUT8:	TLNE	F,ETYPE!GTYPE	;E OR G TYPE?
	JRST	FLOUT9		;YES
	TLNE	F,EXPSGN	;NEGATIVE EXPONENT?
	MOVN	XP,XP		;YES
	ADD	SF,XP		;SCALE BY EXPONENT FOR F TYPE
FLOUT9:	MOVE	T1,D
	ADD	T1,SF		;SCALE FACTOR TO
	CAIGE	T1,MAXDIG	;TOO MANY DECIMAL PLACES?
	JRST	DIGOK		;NO,  SIZE OK
	MOVEI	T1,MAXDIG	;YES, REPLACE BY MAX PERMITTED
	TLNN	F,37777		;FREE FORMAT?
	SUBI	T1,1		;YES, ONE LESS DIGIT HELPS ROUNDING
DIGOK:	JUMPE	AC0,FLOU10	;SAVE TIME FOR ZERO
	LDB	T2,[POINT 9,AC0,8]	;EXTRACT EXPONENT
	TLZ	AC0,377000	;AND CLEAR IT OUT
	LSH	AC0,-170(T2)	;AND CONVERT TO FRACTIONAL FORM
	JUMPL	AC0,[MOVE AC0,[031463,,146315]
		TLNE	F,ETYPE!GTYPE
		SOJA	XP,FLOU10
		AOJA	SF,FLOU10]
FLOU10:	MOVE	T,P		;MARK BOTTOM OF DIGIT STACK
	PUSH	P,[0]		;AND ALLOW FOR POSSIBLE OVERFLOW
	HRREI	T2,1(T1)	; NUMBER OF DIGITS TO BE PRODUCED
FLOU11:	MULI	AC0,^D10	;MULTIPLY BY 10
	PUSH	P,AC0		;STORE DIGIT ON DIGIT STACK
	MOVE	AC0,AC1		;AND SET UP NEW FRACTION
	SOJG	T2,FLOU11
	MOVEI	T3,-1(P)	;ADDRESS OF LAST PRINTING DIGIT
	MOVE	T4,1(T3)
	CAIGE	T4,5		;CARRY GENERATED?
	JRST	FLOU13		;NO

FLOU12:	AOS	T4,(T3)		;INCREMENT DIGIT
	CAIE	T4,^D10		;ANY CARRY?
	JRST	FLOU13		;NO
	SETZM	(T3)		;YES - REPLACE BY ZERO
	SOJA	T3,FLOU12	;KEEP GOING

FLOU13:	MOVEI	T2,2(T)		;GET BASE OF STACKED DIGITS
	MOVE	T3,1(T)
	JUMPE	T3,FLOU14	;DID OVERFLOW OCCUR?
	SUBI	T2,1		;YES - MOVE BACK BASE POINTER
	TLNE	F,EXPSGN	;NEGATIVE EXPONENT?
	SOJA	XP,.+2		;YES, DECREMENT EXPONENT
	ADDI	XP,1		;NO, INCREMENT EXPONENT
	TLNN	F,ETYPE		;IF F TYPE
	ADDI	SF,1		;INCREMENT SF ALSO

FLOU14:	TLNN	F,GTYPE		;G TYPE?
	JRST	FLOU16		;NO
	TLNE	F,EXPSGN	;NEGATIVE EXPONENT?
	JUMPN	XP,FLOU15	;JUMP IF LESS THAN 0.1
	CAIGE	D,(XP)		;WILL F FORMAT FIT?
	JRST	FLOU15		;NO USE E FORMAT
	MOVE	SF,XP		;PUT EXPONENT IN EXPECTED PLACE
	JRST	FLOU16		;CONTINUE WITH F CONVERSION
FLOU15:	TLO	F,ETYPE		;E TYPE CONVERSION
	HRRE	SF,F		;RESET SCALE FACTOR
FLOU16:	MOVE	C,W		;GET WIDTH
	SUBI	C,2(D)		;SIGN, POINT AND CHARS. FOLLOWING
	TLNE	F,GTYPE		;G CONVERSION?
	JRST	[TLNN	F,ETYPE		;E TYPE?
		SUBI	D,(SF)		;NO, REDUCE CHAR. AFTER POINT FOR F
		JRST	FLOU17]		;BUT IGNORE SCALE FACTOR IN WIDTH
	JUMPLE	SF,FLOU17	;IGNORE NEG SCALING
	SUBI	C,(SF)		;+SCALING
FLOU17:	TLNE	F,ETYPE!GTYPE	;SKIP IF JUST F TYPE
	SUBI	C,4		;ALLOW FOR E+00
TRYFIT:	JUMPGE	C,FIT		;WILL FIT FORMAT
	TLNN	F,NUMSGN	;IS SIGN POSITIVE
	AOJE	C,[TLO	F,NOSIGN	;YES, ALLOW IT
		JRST	GO2ERF]		;AND CONTINUE
	TLNN	F,ETYPE		;IF E FORMAT
	TLZN	F,GTYPE		;WAS IT G TO F CONVERSION?
	JRST	NOFIT		;E TYPE OR NOT G TO F
	ADDI	C,3		;REMOVE 4 TRAILING SPACES
	JRST	TRYFIT		;AND TRY AGAIN

NOFIT:
IFN ASTFL,<MOVE	P,T		;RESTOTE STACK POINTER
	PUSHJ	P,ASTRK.	;FIELD TOO SMALL
	JRST	RETRNO		;FILL WITH *'S AND EXIT>
IFE ASTFL,<ADD	SF,C		;LESS DIGITS TO OUTPUT
	ADD	T1,C		;AND LESS IN STACK
	SUB	T2,C		;ADJUST STACK POINTER>

FIT:	CAIG	C,1		;SPACE FOR LEADING BLANKS?
	JRST	GO2ERF		;NO LEADING BLANKS
	PUSHJ	P,SPACE		;OUTPUT ONE
	SOJA	C,FIT		;UNTIL ENOUGH
GO2ERF:	JUMPL	F,EFORM		;JUMP IF ETYPE
;F FORMAT

FFORM:	JUMPLE	SF,FFORM3	;NO LEADING DIGITS
	SKIPLE	C		;ANY ROOM?
	PUSHJ	P,SPACE		;YES, ANOTHER BLANK THEN
	PUSHJ	P,SIGN		;OUTPUT SIGN
	PUSHJ	P,DIGIT		;OUTPUT INTEGRAL DIGIT
	SOJG	T1,.+2		;TOTAL COUNT EXPIRED?
	TLO	F,DIGEXH	;YES - FLAG DIGITS EXHAUSTED
	SOJG	SF,.-3		;RETURN IF MORE DIGITS
	PUSHJ	P,DPOINT	;PRINT DECIMAL POINT

FFORM1:	JUMPE	D,FFORM2	;TEST FOR DIG AFTER POINT 
	PUSHJ	P,DIGIT		;OUTPUT FRACTIONAL DIGIT
	SOJG	T1,.+2		;TOTAL COUNT EXPIRED?
	TLO	F,DIGEXH	;YES - FLAG DIGITS EXHAUSTED
	SOJG	D,FFORM1	;RETURN IF MORE DIGITS

FFORM2:	MOVE	P,T		;RESTORE STACK
	TLNN	F,GTYPE		;G FORMAT REQUIRES 4 BLANKS
	JRST	RETRNO		;FINISHED
	MOVEI	C,4		;SET FOR 4
	PUSHJ	P,SPACE		;BLANKS
	SOJG	C,.-1
	JRST	RETRNO		;FINISHED

FFORM3:	ADD	D,SF		;REDUCE D IF SF NEGATIVE
	PUSHJ	P,SIGN		;OUTPUT SIGN
	SKIPLE	C		;IF ROOM FOR IT
	PUSHJ	P,ZERO		;OUTPUT "0"
	PUSHJ	P,DPOINT	;AND DEC. POINT
	JUMPGE	D,.+4		;IF D IS NEG. SF IS TOO BIG
	LDB	SF,[POINT 7,F,10]
	MOVNS	SF		;SO USE DIGIT WIDTH FOR ZEROS
	SETZ	D,		;AND NO DIGITS
	JUMPE	SF,FFORM1	;NOW FOR DIGITS
	PUSHJ	P,ZERO		;ZERO AFTER POINT
	AOJA	SF,.-2		;LOOP ON ZEROS

FFORM4:	SOJL	AC0,FFORM1	;ANY MORE ZEROS NEEDED?
	MOVEI	AC0,"0"		;YES - PREPARE FOR ONE
	SOJN	D,FFORM5	;LAST DIGIT IN FRACTION?
	JUMPN	AC0,FFORM5	;YES - ZEROS ENDED?
	MOVE	T4,(T2)
	CAIL	T4,5		;YES - NUMBER >= 0.5?
	MOVEI	AC0,"1"		;YES - MAKE IT A "1"

FFORM5:	PUSHJ	P,DEPOT.	;OUTPUT RELEVANT DIGIT
	JUMPN	D,FFORM4	;ANY MORE FRACTION DIGITS?
	JRST	FFORM2
;E FORMAT

EFORM:	PUSHJ	P,SIGN		;OUTPUT SIGN
	JUMPN	T1,.+2		;CHECK FOR NO SIGNIFICANT DIGITS
	TLO	F,DIGEXH	;ENSURE ZEROES WILL BE PRINTED
	JUMPN	XP,.+2		;CHECK FOR 0 EXP
	TLZ	F,EXPSGN	;IF SO SET EXPONENT +
	JUMPE	SF,EFORM1	;LIFE IS SIMPLER IF NO SCALING
	TLNE	F,EXPSGN	;NEGATIVE EXPONENT?
	JRST	[ADD	XP,SF		;YES, INCREASE EXP
		JUMPGE XP,EXPNCH	;SIGN OF EXPONENT DIDN'T CHANGE
		JRST	EXPCH]		;BUT IT DID
	SUB	XP,SF		;SCALE EXPONENT
	JUMPGE	XP,EXPNCH	;SIGN DIDN'T CHANGE
EXPCH:	TLC	F,EXPSGN	;SWAP EXPONENT SIGN
EXPNCH:	JUMPLE	SF,EFORM1	;JUMP IF NOT POSITIVE SCALING
	PUSHJ	P,DIGIT		;OUTPUT LEADING DIGITS
	SOJN	T1,.+2		;COUNT EXPIRED?
	TLO	F,DIGEXH	;YES
	SOJN	SF,.-3		;RETURN FOR MORE
	JRST	EFORM2		;SKIP LEADING ZERO

EFORM1:	JUMPLE	C,EFORM2	;NO SPACE LEFT FOR "0"
	PUSHJ	P,ZERO		;OUTPUT ZERO
EFORM2:	PUSHJ	P,DPOINT	;AND DECIMAL POINT
	JUMPGE	SF,EFORM3	;ACCOUNT FOR NEG SCALING
	ADD	D,SF		;NOT SO MANY DIGITS NOW
	PUSHJ	P,ZERO		;BY OUTPUTTING ZEROS
	AOJL	SF,.-1
EFORM3:	JUMPLE	D,EFORM4	;IF NOT ANY DIGITS AFTER POINT
	PUSHJ	P,DIGIT		;OUTPUT FRACTIONAL DIGIT
	SOJN	T1,.+2		;TOTAL COUNT EXPIRED?
	TLO	F,DIGEXH	;YES - FLAG DIGITS EXHAUSTED
	SOJG	D,.-3		;RETURN IF MORE DIGITS

EFORM4:	MOVEI	AC0,"E"
	PUSHJ	P,DEPOT.	;OUTPUT "E"
	JUMPE	XP,EFORM5	;ALWAYS + IF ZERO
	TLNE	F,EXPSGN
	TLO	F,NUMSGN	;TRANSFER EXPONENT SIGN 
EFORM5:	PUSHJ	P,PLUS		;PRINT SIGN
	MOVEI	C,2		;AND SET DIGIT COUNT
	MOVE	P,T		;RESTORE STACK POINTER
	MOVM	AC0,XP		;GET EXPONENT
	JRST	OUTP1		;AND LET OUTP1 DO THE WORK
; OUTPUT ROUTINES

DPOINT:	MOVEI	AC0,"."		;DECIMAL POINT
	JRST	DEPOT.		;PRINT AND RETURN

SPACE:	MOVEI	AC0," "		;SPACE
	JRST	DEPOT.

ZERO:	MOVEI	AC0,"0"
	JRST	DEPOT.

PLUS:	MOVEI	AC0,"+"
	JRST	SIGN1
SIGN:	TLZE	F,NOSIGN	;NO ROON FOR SIGN?
	POPJ	P,		;JUST RETURN
	MOVEI	AC0," "
SIGN1:	TLZE	F,NUMSGN	;ALWAYS CLEAR FLAG
	MOVEI	AC0,"-"		;SELECT SIGN
	JRST	DEPOT.		;AND PRINT

DIGIT:	MOVEI	AC0,"0"
	TLNE	F,DIGEXH	;DIGITS EXHAUSTED?
	JRST	DEPOT.
	MOVE	AC0,(T2)	;GET NEXT DIGIT
	ADDI	AC0,"0"		;CONVERT TO ASCII
	AOJA	T2,DEPOT.	;AND PRINT

OUTP1:	MOVEI	XP,1		;SET UP DIGIT COUNT

OUTP2:	IDIVI	AC0,^D10	;AND GENERATE DIGITS IN REVERSE
	PUSH	P,AC1		;AND SAVE THEM ON THE STACK
	JUMPE	AC0,OUTP3	;ANY LEFT?
	AOJA	XP,OUTP2	;YES - COUNT AND CARRY ON

OUTP3:	CAML	XP,C		;ANY LEADING SPACES?
	JRST	OUTP4		;NO
	PUSHJ	P,ZERO		;YES - PRINT ONE
	SOJA	C,OUTP3		;AND DECREASE UNTIL FINISHED

OUTP4:	POP	P,AC0		;POP UP DIGIT
	ADDI	AC0,"0"		;ADD ASCII OFFSET
	PUSHJ	P,DEPOT.	;AND PRINT IT
	SOJN	XP,OUTP4	;REPEAT UNTIL FINISHED
RETRNO:	HRLI	1,1-NA(P)	;RESTORE ACCS
	HRRI	1,2
	MOVEM	G,G-1-NA(P)	;RESTORE AC 7
	BLT	1,1+NA
	SUB	P,[NA,,NA]
	POP	P,1
	POPJ	P,		; EXIT FROM ROUTINE

SUBTTL SINGLE PRECISION POWERS OF TEN

STENM1:	175631,,463146		; 1.0E-1
STEN0:	201400,,000000		; 1.0
STEN1:	204500,,000000		; 1.0E1
	207620,,000000		; 1.0E2
	212764,,000000		; 1.0E3
	216470,,400000		; 1.0E4
	221606,,500000		; 1.0E5
	224750,,220000		; 1.0E6
	230461,,132000		; 1.0E7
	233575,,360400		; 1.0E8
	236734,,654500		; 1.0E9
	242452,,013710		; 1.0E10
	245564,,416672		; 1.0E11
	250721,,522451		; 1.0E12
	254443,,023471		; 1.0E13
	257553,,630410		; 1.0E14
	262706,,576512		; 1.0E15
	266434,,157116		; 1.0E16
	271543,,212741		; 1.0E17
	274674,,055532		; 1.0E18
	300425,,434430		; 1.0E19
	303532,,743536		; 1.0E20
	306661,,534466		; 1.0E21
	312417,,031702		; 1.0E22
	315522,,640262		; 1.0E23
	320647,,410336		; 1.0E24
	324410,,545213		; 1.0E25
	327512,,676456		; 1.0E26
	332635,,456171		; 1.0E27
	336402,,374714		; 1.0E28
	341503,,074077		; 1.0E29
	344623,,713116		; 1.0E30
	347770,,675742		; 1.0E31
	353473,,426555		; 1.0E32
	356612,,334311		; 1.0E33
	361755,,023373		; 1.0E34
	365464,,114135		; 1.0E35
	370601,,137164		; 1.0E36
	373741,,367021		; 1.0E37
STEN38:	377454,,732313		; 1.0E38
	END
